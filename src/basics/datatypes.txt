*******************************************************************************
                                  Data Types
*******************************************************************************

Data may represent different things and require various operations available.
In programming data types is an important concept. For example **1984** may be
a number (``1984``), a text (``"1984``) or event a date. The data type
describes the operations, that are allowed for the data, like additions for
numbers or concatenation for text (e.g. ``1 + 2 -> 3``, ``"1" + "3" -> "13"``).

Python uses dynamic typing. This means as a developer you should not declare
a variable with its data type - the interpreter will do this for you. Other
popular language using dynamic typing are JavaScript and PHP. Setting variables
in Python is as easy as:

.. code-block:: python

    script_name = "Circle area"  # create a text variable
    radius = 5                   # create an integer variable
    area = 2 * 3.14 * 5 ** 2     # create a floating-point variable

Built-In Data Types
===================

Python has the following data types built-in:

- Integers (``int``)
- Floating-point numbers (``float``)
- Complex numbers (``complex``)
- Booleans (``bool``)
- Strings (``str``)
- Bytes (``bytes``)
- Byte arrays (``bytearray``)
- Lists (``list``)
- Tuples (``tuple``)
- Sets (``set``)
- Frozen sets (``frozenset``)
- Dictionaries (``dict``)
- None (``NoneType``)

Any one can use them without additional imports or packages installations. 

Text
====

Text data are stored as strings (``str`` data type) in Python. Any sequence of
letters, digits, punctuation marks and whitespace characters enclosed with
quotes is considered to be a string literal. Both single quotes (``'``) and
double quotes (``"``) can be used interchangeably to create a string in Python.

.. code-block:: python

    variable = 'string'
    variable = "string"
    variable = str("string")  # declare using built-in constructor

Escaping
--------

In programming this is a process of using a special character to indicate that
the following character(s) should be treated differently from their literal
meaning. The common usage is to include a special character(s) within strings.
A **backslash** character is used to *escape* the following one.

.. code-block:: python
   :caption: Example of Escaping in Python

    # Escaping single quotes within a string
    print('She said, "I\'m ready for the test!"')

    # Escaping double quotes within a string
    print("He replied, \"I'll be there in a minute.\"")

    # Escaping backslash itself
    print("Backslash \\ is a special character for escaping other characters")

    # Escaping a newline character
    print("Hello\nworld")

    # Escaping a tab character
    print("Name\tAge\tGender")

Single quotes or double quotes
------------------------------

Don't care. Use any quote mark you like. A *string* is a sequence of characters
after the opening quote and till the closing one. You may use double quotes in
case a single quote is a part of the text (e.g. ``"It's a Serhii's document"``)
and vise versa (e.g. ``'The name of the ship was a "Billy of Tea"'``). It's
a good practice not to mess single and double quotes within one project. Just
keep using a chosen one character for all strings.

Multiline strings
-----------------

You can assign a multiline string by using triple quotes: Both single quote
and double quote characters are available.

.. code-block:: python

    variable = """Well, ye scrawny mate- set sails for riddle!
    Never love a lagoon."""
    variable = '''Hello
    World'''

The same syntax is used to create docstring, which are a special case of string
usage. We will look on these in the future.

Strings are subscriptable
-------------------------

.. note:: ``str`` is not the only one subscriptable data type in Python.

This means you can access individual characters or slices within a string using
indexes. A string is a *sequence* of characters and each character within
a string has its own position - an *index*. Indexing starts at 0, so the first
character in a string is at index 0, the second one is at index 1, and so on.
Negative indexing is also possible, with -1 representing the last character in
a string, -2 representing the second-to-last character, and so on. Use square
brackets (``[]``) to access the index.

.. code-block:: python

    variable = "Plank of a salty strength, endure the fortune!"
    
    variable[0]   # P
    variable[-4]  # u

You can also *slice* strings, this means to get a subsequence of characters.
The slice syntax consists of 3 digits:

-  the first one represent the index to start (inclusive), defaults to 0
-  the second one represent the index to stop (non-inclusive), defaults to
   the length of the sequence
-  the third one represents a step, defaults to 1

These numbers are separated within colon (``:``) and enclosed within square
brackets. Any slice digit may be omitted.

.. code-block:: python
    :caption: Sequence slicing

    variable = "0123456789"  # a string of digits

    variable[0:10:1]  # 0123456789
    variable[:10:2]   # 02468
    variable[:-2]     # 01234567
    variable[::-1]    # 9876543210

Strings are iterable
--------------------

Since strings are arrays, we can loop through the characters in a string with
a ``for`` loop:

.. code-block:: python

    for character in "foobar":
        print(character)

Strings are immutable
---------------------

This means, you cannot change an individual character within a string.

.. code-block:: python

    variable = "variable"
    variable[0] = "V"  # this action will cause an error

Integers
========

``int``, or integer, is a whole number, positive or negative, without decimals.

.. code-block:: python

    integer_number = 42
    integer_number = int(42)  # declare using casting

Floats
======

``float``, or floating point number, is a number, positive or negative,
containing one or more decimals.

.. code-block:: python

    float_number = 42.        # will assign 42.0
    float_number = .42        # will assign 0.42
    float_number = 4.2        # will assign 4.2
    float_number = float(42)  # declare using casting (42.0)
