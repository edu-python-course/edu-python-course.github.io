*******************************************************************************
                                  Data Types
*******************************************************************************

Data may represent different things and require various operations available.
In programming data types is an important concept. For example **1984** may be
a number (``1984``), a text (``"1984``) or event a date. The data type
describes the operations, that are allowed for the data, like additions for
numbers or concatenation for text (e.g. ``1 + 2 -> 3``, ``"1" + "3" -> "13"``).

Python uses dynamic typing. This means as a developer you should not declare
a variable with its data type - the interpreter will do this for you. Other
popular language using dynamic typing are JavaScript and PHP. Setting variables
in Python is as easy as:

.. code-block:: python

    script_name = "Circle area"  # create a text variable
    radius = 5                   # create an integer variable
    area = 2 * 3.14 * 5 ** 2     # create a floating-point variable

Built-In Data Types
===================

Python has the following data types built-in:

- Integers (``int``)
- Floating-point numbers (``float``)
- Complex numbers (``complex``)
- Booleans (``bool``)
- Strings (``str``)
- Bytes (``bytes``)
- Byte arrays (``bytearray``)
- Lists (``list``)
- Tuples (``tuple``)
- Sets (``set``)
- Frozen sets (``frozenset``)
- Dictionaries (``dict``)
- None (``NoneType``)

Any one can use them without additional imports or packages installations. 

Text
====

Text data are stored as strings (``str`` data type) in Python. Strings are
surrounded by either single quotation marks, or double quotation marks. So
``'Python'`` is the same as ``"Python"``. To assign string to a variable:

.. code-block:: python

    string = "string"
    string = str("string")  # declare using casting

Multiline strings
-----------------

You can assign a multiline string using three quotes:

.. code-block:: python

    variable = """Well, ye scrawny mate- set sails for riddle!
    Never love a lagoon."""

Single quotes or double quotes
------------------------------

Don't care. Use any quote mark you like. Remember the string is any characters
surrounded by the same quotes. So you are use single quotes if double quote
mark is the part of your string data and vice versa. It's not recommended to
mess various quote marks in the same project.

Strings are subscriptable
-------------------------

Strings in Python are arrays of bytes representing unicode characters. This is
common for many programming languages. However Python does not have a data type
to represent a single character itself; a single character in Python is of
string type as well. You can get the character at a specific position in
a string.

.. code-block:: python

    text = "Plank of a salty strength, endure the fortune!"
    character = text[10]

Strings are iterable
--------------------

Since strings are arrays, we can loop through the characters in a string with
a ``for`` loop:

.. code-block:: python

    for character in "foobar":
        print(character)

Integers
========

``int``, or integer, is a whole number, positive or negative, without decimals.

.. code-block:: python

    integer_number = 42
    integer_number = int(42)  # declare using casting

Floats
======

``float``, or floating point number, is a number, positive or negative,
containing one or more decimals.

.. code-block:: python

    float_number = 42.        # will assign 42.0
    float_number = .42        # will assign 0.42
    float_number = 4.2        # will assign 4.2
    float_number = float(42)  # declare using casting (42.0)
