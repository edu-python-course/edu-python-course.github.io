.. meta::
    :description: Python functions
    :author: Serhii Horodilov
    :keywords: python, basics, functions

*******************************************************************************
                                   Functions
*******************************************************************************

You may be familiar with the mathematical concept of a **function**. It is
a relationship or mapping between one or more inputs and a set of outputs.

.. math::

    z = f(x, y)

Here ``f`` is a function that operates on the inputs ``x`` and ``y``, and
its output is bind to ``z``.

In programming a **function** is a self-contained block of code that
encapsulate a specific task or related group of tasks.

You may be familiar with some built-in functions like ``max``, ``min``, ``len``
etc.

.. todo: function definition

The usual syntax for defining a Python function is as follows:

::

    def <function_name>([<parameters>]):
        <statement>

+---------------------+-------------------------------------------------------+
| Component           | Meaning                                               |
+=====================+=======================================================+
| ``def``             | The keyword that informs Python that a function is    |
|                     | being defined                                         |
+---------------------+-------------------------------------------------------+
| ``<function_name>`` | A valid Python identifier that names the function     |
+---------------------+-------------------------------------------------------+
| ``<parameters>``    | An optional, comma-separated list of parameters that  |
|                     | may be passed to the function                         |
+---------------------+-------------------------------------------------------+
| ``<statement(s)>``  | A block of valid Python statements;                   |
|                     | **body** of the function                              |
+---------------------+-------------------------------------------------------+

The syntax for calling a Python function is as follows:

::

    <function_name>([<arguments>])

The ``<arguments>`` are the values passed into the function. They correspond
to the ``<parameters>`` in the function definition. You can define a function
that doesn't take any arguments, but the parentheses are still required. Both
a function definition and a function call must always include parentheses,
even if they're empty.

Argument passing
================
.. todo: function arguments (positional and key-word)

More often, you want to **pass data into a function**.

Positional arguments
--------------------

.. note::

    Because of the way they're defined and used, positional arguments are also
    called *required arguments*.

The most straightforward way to pass arguments to a function is with
**positional arguments**.
In the function definition, you specify a comma-separated list of parameters
inside the parentheses.
When the function is called, you specify a corresponding list of arguments.

The parameters behave like **variables** that are defined locally to the
function.

Although positional arguments are the most straightforward way to pass data to
a function, they also afford the least flexibility. For starters, the **order**
of the arguments in the call must match the order of the parameters in the
definition.

There's nothing to stop you from specifying positional arguments out of order.
The function even may still run, but it's very unlikely to produce the correct
results.

.. note::

    It's responsibility of the programmer who defines the function to document
    what the appropriate arguments should be, and it's the responsibility of
    the user of the function to be aware of that information and abide by it.

With positional arguments, the arguments in the call and the parameters in the
definition must agree not only in order, but in number as well.

Keyword arguments
-----------------

When calling a function, you can specify arguments in the form
``<keyword>=<value>``. In that case, each ``<keyword>`` must match a parameter
in the function definition. Referencing a keyword that doesn't match any of
these declared parameters generates an exception.

Using keyword arguments lifts the restriction on arguments order. Each keyword
argument explicitly designates a specific parameter by name, so you can specify
them in any order and Python will still know which argument goes with which
parameter.

Like with positional arguments, though, the number of arguments and parameters
must still match.

You can call a function using both positional and keyword arguments.
Once you've specified a keyword argument, there can't be any positional
arguments to the right of it.

Default values
--------------

If a parameter specified in the function definition has the form of
``<name>==<value>``, then ``<value>`` becomes a default value for that
parameter. Parameters defined this way are referred to as
**default or optional parameters**.
