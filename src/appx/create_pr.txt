.. meta::
    :description: The instructions to create a pull request via GitHub
    :author: Vladyslav Ponomaryov
    :author: Serhii Horodilov sgorodil@gmail.com
    :keywords: git, github, pull request, branch, merge

#########################
Creating the Pull Request
#########################

Create a pull request to propose and collaborate on changes to a repository.
These changes are proposed in a *branch*, which ensures that the default
branch only contains finished and approved work :cite:`github:creating-pr`.

*******************
About pull requests
*******************

Pull requests let you tell others about changes you've pushed to a branch in
a repository on GitHub. Once a pull request is opened, you can discuss and
review the potential changes with collaborators and add follow-up commits
before your changes are merged into the base branch
:cite:`github:about-pr`.

The compare and pull request pages use different methods to calculate the diff
for changed files:

-   Compare pages show the diff between the tip of the head ref and the current
    common ancestor (that is, the merge base) of the head and base ref.
-   Pull request pages show the diff between the tip of the head ref and
    the common ancestor of the head and base ref at the time when the pull
    request was created.
    Consequently, the merge base used for the comparison might be different.

In *few words*: both source and target branches **should** share some commit(s)
in their history and the source branch **should** has commit(s) missing on
the target one.

******************
Repository content
******************

Following SHOULD be included to the repository:

-   code base
-   project dependencies (if any)

Following MAY be included to the repository:

-   additional information (e.g. README file and other documents)
-   dummy data (e.g. fixtures for development and testing etc.)

Following SHOULD be excluded from the repository:

-   virtual environment directory
-   project database (e.g. "*.sqlite3", "*.db" etc.)
-   python byte-compiled code (``__pycache__``)
-   IDE configurations (e.g. ".vscode", ".idea" etc.)
-   Desktop Services Store (".DS_Store")

**********************
Repository preparation
**********************

This should be done once for each repository.

Repository initialization
=========================

#.  Create README file and provide a brief description for your project
    (optional).
#.  Create a virtual environment.
#.  Install project dependencies.
#.  Freeze the dependencies.

    .. code-block:: shell

        pip freeze > requirements.txt

#.  Create a base code modules (e.g. initialize django project and apps,
    or create an empty python module like "main.py" etc.).
#.  Create ".gitignore" file and set up directories and files to be excluded
#.  Create a fresh repository.

    .. code-block:: shell

        git init

#.  Stage and commit changes.
#.  Set up remote repository.

    .. code-block:: shell

        git remote add origin <url-to-github-repo>

#.  Push your local branch to remote repo.

Append contributors to remote repository
========================================

Reviews allow collaborators to comment on the changes proposed in
pull requests, approve the changes, or request further changes before
the pull request is merged.
Repository administrators can require that all pull requests are approved
before being merged.

#.  On `GitHub <https://github.com>`_, navigate to the repository settings page
    and switch to **Collaborators and teams** menu item.
#.  Under **Manage access** section click ``Add people`` button.
#.  In modal window start typing GitHub username.
#.  Select a contributor from the dropdown menu.

******************
Working on feature
******************

#.  Create a dedicated branch with some representative name
    (e.g. "feature/models", "cbv" etc.).
#.  Switch to the newly created branch.
#.  Do the work and commit changes on a feature branch.

.. hint::

    You can create a branch and switch to it by a single command.

    .. code-block:: shell

        git checkout -b <target_branch> [<origin_branch>]


.. hint::

    While working on a *feature branch* make commits for each completed logical
    block of code.

*************************
Creating the pull request
*************************

#.  Make sure your working branch is up-to-date with the default one.
    You can pull changes for the default branch and rebase your feature branch
    onto it.
#.  Push feature branch to the remote repository. By default the current active
    branch is pushed to the remote repo.

    .. code-block:: shell

        git push -u origin <remote_branch_name> [<local_branch_name>]

#.  Go to your remote repository at GitHub and click **Pull requests** tab.
#.  On **Pull requests** tab click **New** button.
#.  Select your default branch as *target* and your feature branch as *source*.
#.  Provide some brief description for your pull request.
#.  Press **Create pull request** button.
#.  On the pull request page add a **reviewer** by clicking the appropriate
    option and selecting a person from a dropdown menu.

**************
Making changes
**************

From this moment, your pull request *is waiting* for the review.

The reviewer will **approve** or **reject** your pull request.
Optionally the reviewer may provide some comments to your code;
**rejected** pull requests will always come with some details.

In case your work is **rejected**, you are to provide fixes. To do this:

#.  Do the work in your local feature branch.
#.  Stage and commit changes.
#.  Push them to remote branch.
#.  Re-request review from the pull request page.

All commits related to the source branch will be automatically appended to
the open pull request. The reviewer will review your updates.
Repeat this process until the pull request is **approved**.

************************
Merging the pull request
************************

Once your pull request is **approved** - merge it.
Select one of the options available with your pull request; they may be:

-   Create a merge commit
-   Rebase and merge
-   Squash and merge

After that the pull request is merged into your target branch.
