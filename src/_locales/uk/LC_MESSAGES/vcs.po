# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Python training course authors and contributors
# This file is distributed under the same license as the Python Training
# Course package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: Python Training Course 2023.06.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-01 11:38+0300\n"
"PO-Revision-Date: 2023-08-19 12:18+0300\n"
"Last-Translator: Serhii Horodilov <sgorodil@gmail.com>\n"
"Language: uk\n"
"Language-Team: uk <LL@li.org>\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../src/vcs/basics.txt:-1 ../../src/vcs/branch.txt:-1
#: ../../src/vcs/github.txt:-1 ../../src/vcs/index.txt:-1
#: ../../src/vcs/intro.txt:-1 ../../src/vcs/setup.txt:-1
msgid "Version control system"
msgstr "Система контролю версій"

#: ../../src/vcs/basics.txt:-1 ../../src/vcs/branch.txt:-1
#: ../../src/vcs/github.txt:-1 ../../src/vcs/index.txt:-1
#: ../../src/vcs/intro.txt:-1 ../../src/vcs/pullrequest.txt:-1
#: ../../src/vcs/setup.txt:-1
msgid "Serhii Horodilov"
msgstr "Serhii Horodilov"

#: ../../src/vcs/basics.txt:-1
msgid "version, control, system, vcs, git, basics"
msgstr "version, control, system, vcs, git, basics"

#: ../../src/vcs/basics.txt:8
msgid "Git Basics"
msgstr "Основи Git"

#: ../../src/vcs/basics.txt:11
msgid "Getting a Git repository"
msgstr "Отримання Git-репозиторію"

#: ../../src/vcs/basics.txt:13
msgid "You typically obtain a Git repository in one of two ways:"
msgstr "Зазвичай ви отримуєте Git-репозиторій одним з двох способів:"

#: ../../src/vcs/basics.txt:15
msgid ""
"You can take a local directory that is currently not under version "
"control, and turn it into a Git repository."
msgstr ""
"Ви можете взяти локальний каталог, який наразі не перебуває під контролем"
" версій, і перетворити його на Git-репозиторій."

#: ../../src/vcs/basics.txt:17
msgid "You can clone an existing Git repository from elsewhere."
msgstr "Ви можете клонувати існуюче сховище Git'а з іншого місця."

#: ../../src/vcs/basics.txt:19
msgid ""
"In either case, you end up with a Git repository on your local machine, "
"ready for work."
msgstr ""
"У будь-якому випадку, ви отримаєте Git-репозиторій на вашій локальній "
"машині, готовий до роботи."

#: ../../src/vcs/basics.txt:23
msgid "Initializing repo in an existing directory"
msgstr "Ініціалізація репо в існуючому каталозі"

#: ../../src/vcs/basics.txt:25
msgid ""
"If you have a project directory that is currently not under version "
"control and you want to start controlling it with Git, you first need to "
"go to that project's directory. If you've never done this, it looks a "
"little different depending on which system you're running:"
msgstr ""
"Якщо у вас є каталог проекту, який наразі не перебуває під контролем "
"версій, і ви хочете почати контролювати його за допомогою Git'а, спершу "
"вам потрібно перейти до каталогу цього проекту. Якщо ви ніколи цього не "
"робили, це виглядає трохи інакше, залежно від того, якою системою ви "
"користуєтеся:"

#: ../../src/vcs/basics.txt:30
msgid "Change directory in bash (Linux)"
msgstr "Зміна каталогу в bash (Linux)"

#: ../../src/vcs/basics.txt:35
msgid "Change directory in bash (MacOS)"
msgstr "Зміна каталогу в bash (MacOS)"

#: ../../src/vcs/basics.txt:40
msgid "Change directory in PowerShell (Windows)"
msgstr "Зміна каталогу в PowerShell (Windows)"

#: ../../src/vcs/basics.txt:45
msgid "In the project's directory initialize a new Git repository."
msgstr "У каталозі проекту ініціалізуйте новий Git-репозиторій."

#: ../../src/vcs/basics.txt:51
msgid ""
"This creates a new subdirectory named .git that contains all of your "
"necessary repository files -- a Git repository skeleton."
msgstr ""
"Це створить новий підкаталог з ім'ям .git, який міститиме всі необхідні "
"файли сховища - скелет сховища Git."

#: ../../src/vcs/basics.txt:55
msgid "Cloning an existing repo"
msgstr "Клонування існуючого репо"

#: ../../src/vcs/basics.txt:57
msgid ""
"If you want to get a copy of an existing Git repository -- for example, a"
" project you'd like to contribute to -- the command you need is ``git "
"clone``."
msgstr ""
"Якщо ви хочете отримати копію існуючого сховища Git'а - наприклад, "
"проекту, до якого ви хочете долучитися, - вам потрібна команда ``git "
"clone``."

#: ../../src/vcs/basics.txt:64
msgid ""
"That creates a directory named *edu-python-course.github.io*, initializes"
" a *.git* directory inside it, pulls down all the data for that "
"repository, and checks out a working copy of the latest version."
msgstr ""
"Він створює каталог з назвою *edu-python-course.github.io*, ініціалізує "
"каталог *.git* всередині нього, витягує всі дані для цього сховища і "
"перевіряє робочу копію останньої версії."

#: ../../src/vcs/basics.txt:72
msgid ""
"That command does the same thing as the previous one, but the target "
"directory is called *python-course*."
msgstr ""
"Ця команда робить те саме, що й попередня, але цільовий каталог "
"називається *python-course*."

#: ../../src/vcs/basics.txt:75
msgid ""
"Git has a number of different transfer protocols you can use. The "
"previous example uses the ``https://`` protocol, but you may also see "
"``git://`` or ``user@server:path/to/repo.git``, which uses the SSH "
"transfer protocol."
msgstr ""
"Git має декілька різних протоколів передачі даних, які ви можете "
"використовувати. У попередньому прикладі використовується протокол "
"``https://``, але ви також можете побачити ``git://`` або "
"``user@server:path/to/repo.git``, який використовує протокол передачі "
"SSH."

#: ../../src/vcs/basics.txt:80
msgid "Making changes to the repo"
msgstr "Внесення змін до репозиторію"

#: ../../src/vcs/basics.txt:82
msgid ""
"At this point, you should have a *bona fide* Git repository on your local"
" machine, and a checkout or *working copy* of all of its files in front "
"of you. Typically, you'll want to start making changes and committing "
"snapshots of those changes into your repository each time the project "
"reaches a state you want to record."
msgstr ""
"На цьому етапі у вас має бути *справжній* Git-репозиторій на локальному "
"комп'ютері, а також контрольна або *робоча копія* всіх його файлів перед "
"вами. Зазвичай, ви захочете почати вносити зміни і фіксувати знімки цих "
"змін у вашому сховищі кожного разу, коли проект досягне стану, який ви "
"хочете зафіксувати."

#: ../../src/vcs/basics.txt:88
msgid ""
"Remember that each file in your working directory can be in one of two "
"states: **tracked** or **untracked**."
msgstr ""
"Пам'ятайте, що кожен файл у вашому робочому каталозі може перебувати в "
"одному з двох станів: **відстежується** або **невідстежується**."

#: ../../src/vcs/basics.txt:91
msgid ""
"Tracked files are files that were in the last snapshot, as well as any "
"newly staged files; they can be unmodified, modified, or staged. In "
"short, tracked files are files that Git knows about."
msgstr ""
"Відстежувані файли - це файли, які були в останньому знімку, а також "
"будь-які нещодавно покладені файли; вони можуть бути незміненими, "
"зміненими або покладеними. Коротше кажучи, відстежувані файли - це файли,"
" про які відомо Git'у."

#: ../../src/vcs/basics.txt:94
msgid ""
"Untracked files are everything else -- any files in your working "
"directory that were not in your last snapshot and are not in your staging"
" area. Untracked basically means that Git sees a file you didn't have in "
"a previous snapshot (commit), and which hasn't been yet staged."
msgstr ""
"Невідстежені файли - це все інше - будь-які файли у вашому робочому "
"каталозі, яких не було у вашому останньому знімку і які не перебувають у "
"вашій області сховища. По суті, це означає, що Git бачить файл, якого не "
"було у попередньому знімку (комміті), і який ще не було покладено у "
"сховище."

#: ../../src/vcs/basics.txt:104
msgid "Checking out status of the file(s)"
msgstr "Перевірка стану файлу(ів)"

#: ../../src/vcs/basics.txt:106
msgid ""
"The main tool you use to determine which files are in which state is the "
"``git status`` command."
msgstr ""
"Основним інструментом для визначення стану файлів є команда ``git "
"status``."

#: ../../src/vcs/basics.txt:133
msgid ""
"Newly added *README.md* file is untracked, because it's under \"Untracked"
" files\" heading the status output."
msgstr ""
"Щойно доданий файл *README.md* не відстежується, оскільки він знаходиться"
" у розділі \"Файли, що не відстежуються\" у виведенні статусу."

#: ../../src/vcs/basics.txt:137
msgid "Tracking new files"
msgstr "Відстеження нових файлів"

#: ../../src/vcs/basics.txt:139
msgid "In order to begin tracking a new file, you use the ``git add`` command."
msgstr ""
"Для того, щоб почати відстеження нового файлу, скористайтеся командою "
"``git add``."

#: ../../src/vcs/basics.txt:153
msgid ""
"From now *README.md* file is **added** to the stage area and ready to be "
"committed (is under \"Changes to be committed\" heading)."
msgstr ""
"Відтепер файл *README.md* **додано** до області сцени і він готовий до "
"фіксації (знаходиться під заголовком \"Зміни, що підлягають фіксації\")."

#: ../../src/vcs/basics.txt:157
msgid ""
"You can use wildcards, to stage multiple files at once. The most common "
"use cases is to add **all** modified files, or files inside of a specific"
" directory."
msgstr ""
"Ви можете використовувати підстановочні знаки, щоб вносити зміни до "
"кількох файлів одночасно. Найпоширенішим випадком використання є "
"додавання **усіх** змінених файлів або файлів у певному каталозі."

#: ../../src/vcs/basics.txt:168
msgid "Staging modified files"
msgstr "Зберігання змінених файлів"

#: ../../src/vcs/basics.txt:170
msgid ""
"If a staged (or already committed) file has been changed, it will be "
"moved under \"Modified\" heading. These changes wouldn't be committed "
"unless they are staged."
msgstr ""
"Якщо файл, що перебуває на етапі (або вже зафіксований), було змінено, "
"його буде переміщено у рубрику \"Змінено\". Ці зміни не будуть "
"зафіксовані, якщо вони не були поетапними."

#: ../../src/vcs/basics.txt:190
msgid "Changes may be added to the stage area by repeating ``git add`` command."
msgstr "Зміни можна додати до області сцени, повторивши команду ``git add``."

#: ../../src/vcs/basics.txt:191
msgid ""
"Changes may be discard by ``git restore <file>`` command. This action "
"will restore file to its **staged** version."
msgstr ""
"Зміни можна відкинути командою ``git restore <file>``. Ця дія відновить "
"файл до його **попередньої** версії."

#: ../../src/vcs/basics.txt:195
msgid "Committing changes"
msgstr "Фіксація змін"

#: ../../src/vcs/basics.txt:197
msgid ""
"Now that the stage area is set up the way required, it's time to commit "
"changes. Remember that anything that is still unstaged -- any files you "
"have created or modified that you haven't run git add on since you edited"
" them -- won't go into this commit."
msgstr ""
"Тепер, коли область змін налаштована належним чином, настав час "
"зафіксувати зміни. Пам'ятайте, що все, що ще не є стадією - будь-які "
"файли, які ви створили або змінили, але не запустили git-додаток з "
"моменту редагування, - не потраплять до цього коміту."

#: ../../src/vcs/basics.txt:202
msgid "The simplest way to commit is to type ``git commit``:"
msgstr "Найпростіший спосіб фіксації - ввести ``git commit``:"

#: ../../src/vcs/basics.txt:208
msgid "Doing so launches your editor of choice."
msgstr "Після цього запуститься обраний вами редактор."

#: ../../src/vcs/basics.txt:211
msgid ""
"This is set by your shell's EDITOR environment variable -- usually vim or"
" emacs, although you can configure it with whatever you want using the "
"``git config --global core.editor``"
msgstr ""
"Це задається змінною оточення EDITOR вашої оболонки - зазвичай vim або "
"emacs, хоча ви можете налаштувати її як завгодно за допомогою ``git "
"config --global core.editor``"

#: ../../src/vcs/basics.txt:215
msgid ""
"Alternatively, you can type your commit message inline with the "
"``commit`` command by specifying it after a ``-m`` flag, like this:"
msgstr ""
"Крім того, ви можете ввести повідомлення про фіксацію у рядку з командою "
"``commit``, вказавши його після прапорця ``-m``, як показано нижче:"

#: ../../src/vcs/basics.txt:222
msgid ""
"Although it can be amazingly useful for crafting commits exactly how you "
"want them, the staging area is sometimes a bit more complex than you need"
" in your workflow. If you want to skip the staging area, Git provides a "
"simple shortcut. Adding the ``-a`` option to the ``git commit`` command "
"makes Git automatically stage every file that is already tracked before "
"doing the commit, letting you skip the git add part:"
msgstr ""
"Хоча вона може бути надзвичайно корисною для створення коммітів саме так,"
" як вам потрібно, область підготовки іноді буває трохи складнішою, ніж "
"вам потрібно у вашому робочому процесі. Якщо ви хочете пропустити область"
" підготовки, Git надає простий ярлик. Додавання опції ``-a`` до команди "
"``git commit`` змушує Git автоматично стадіювати кожен файл, який вже "
"відстежується, перед виконанням комміту, дозволяючи вам пропустити "
"частину git add:"

#: ../../src/vcs/basics.txt:263
msgid "Ignoring files"
msgstr "Ігнорування файлів"

#: ../../src/vcs/basics.txt:265
msgid ""
"Often, there is a class of files, that should not be a part of a repo. "
"You want these files to be prevent from being automatically added or even"
" shown as being untracked. These are generally files produced by loggers "
"or a build system, or some local settings for the project that shouldn't "
"be shared across other developers or maintainers. In such cases you can "
"create a *.gitignore* file. Here is the content of *.gitignore* used in "
"current repository:"
msgstr ""
"Часто існує клас файлів, які не повинні бути частиною репозиторію. Ви "
"хочете, щоб ці файли не додавалися автоматично або навіть показувалися як"
" такі, що не відстежуються. Зазвичай це файли, створені логгерами або "
"системою збірки, або деякі локальні налаштування проекту, які не повинні "
"бути доступними для інших розробників або супровідників. У таких випадках"
" ви можете створити файл *.gitignore*. Ось вміст *.gitignore*, який "
"використовується у поточному сховищі:"

#: ../../src/vcs/basics.txt:305
msgid "These lines mean:"
msgstr "Ці рядки означають:"

#: ../../src/vcs/basics.txt:307
msgid ""
"Content within directories named \".venv\", \".env\", \"venv\" or \"env\""
" will be ignored completely."
msgstr ""
"Вміст каталогів з іменами \".venv\", \".env\", \"venv\" або \"env\" буде "
"повністю проігноровано."

#: ../../src/vcs/basics.txt:309
msgid "Content within \"node_modules\" directory will be ignored completely."
msgstr "Вміст каталогу \"node_modules\" буде повністю проігноровано."

#: ../../src/vcs/basics.txt:310
msgid ""
"Any files within directories named \".vscode\" or \".idea\" will be "
"ignored completely."
msgstr ""
"Будь-які файли в каталогах з іменами \".vscode\" або \".idea\" будуть "
"повністю проігноровані."

#: ../../src/vcs/basics.txt:312
msgid "Any file with name starting with hash (#) will be ignored."
msgstr "Будь-який файл з іменем, що починається з хешу (#), буде проігноровано."

#: ../../src/vcs/basics.txt:313
msgid "Any file with name ending with tilda (~) will be ignored."
msgstr "Будь-який файл, ім'я якого закінчується на тильду (~), буде проігноровано."

#: ../../src/vcs/basics.txt:314
msgid ""
"Content within directories named \"temp\" or \"tmp\" will be ignored "
"completely."
msgstr ""
"Вміст каталогів з іменами \"temp\" або \"tmp\" буде повністю "
"проігноровано."

#: ../../src/vcs/basics.txt:316
msgid ""
"Content within directories named \"_builds\", \"_build\", \"builds\" or "
"\"build\" will be ignored completely."
msgstr ""
"Вміст каталогів з іменами \"_builds\", \"_build\", \"builds\" або "
"\"build\" буде повністю проігноровано."

#: ../../src/vcs/basics.txt:318
msgid "Any file with name ending with \".pot\" will be ignored."
msgstr "Будь-який файл з іменем, що закінчується на \".pot\", буде проігноровано."

#: ../../src/vcs/basics.txt:319
msgid "Any file with name ending with \".mo\" will be ignored."
msgstr "Будь-який файл з іменем, що закінчується на \".mo\", буде проігноровано."

#: ../../src/vcs/basics.txt:321
msgid ""
"Setting up a *.gitignore* file for your new repository before you get "
"going is generally a good idea so you don't accidentally commit files "
"that you really don't want in your Git repository."
msgstr ""
"Створення файлу *.gitignore* для вашого нового сховища перед початком "
"роботи, як правило, є гарною ідеєю, щоб випадково не зафіксувати файли, "
"які вам насправді не потрібні у вашому Git-репозиторії."

#: ../../src/vcs/basics.txt:325
msgid ""
"The rules for the patterns you can put in the *.gitignore* file are as "
"follows:"
msgstr "Правила для шаблонів, які ви можете помістити у *.gitignore* файл, такі:"

#: ../../src/vcs/basics.txt:327
msgid "Blank lines or lines starting with # are ignored."
msgstr "Порожні рядки або рядки, що починаються з #, ігноруються."

#: ../../src/vcs/basics.txt:328
msgid ""
"Standard glob patterns work, and will be applied recursively throughout "
"the entire working tree."
msgstr ""
"Працюють стандартні шаблони глобусів, які будуть застосовуватися "
"рекурсивно по всьому робочому дереву."

#: ../../src/vcs/basics.txt:330
msgid ""
"You can start patterns with a forward slash (/) to avoid recursive "
"inclusion."
msgstr ""
"Щоб уникнути рекурсивного включення, ви можете починати шаблони з прямої "
"похилої риски (/)."

#: ../../src/vcs/basics.txt:332
msgid "You can end patterns with a forward slash (/) to specify a directory."
msgstr ""
"Ви можете закінчувати шаблони прямою похилою рискою (/), щоб вказати "
"каталог."

#: ../../src/vcs/basics.txt:333
msgid "You can negate a pattern by starting it with an exclamation point (!)."
msgstr "Ви можете заперечити шаблон, почавши його зі знаку оклику (!)."

#: ../../src/vcs/basics.txt:335
msgid ""
"Glob patterns are like simplified regular expressions that shells use. An"
" asterisk (\\*) matches zero or more characters; [ab] matches any "
"character inside the brackets (in this case a or b); a question mark (?) "
"matches a single character; and brackets enclosing characters separated "
"by a hyphen ([0-9]) matches any character between them (in this case 0 "
"through 9). You can also use two asterisks to match nested directories; "
"a/\\*\\*/z would match *a/z*, *a/b/z*, *a/b/c/z*, and so on."
msgstr ""
"Шаблони глобусів подібні до спрощених регулярних виразів, які "
"використовують оболонки. Зірочка (\\*) відповідає нулю або більше "
"символів; [ab] відповідає будь-якому символу всередині дужок (у цьому "
"випадку a або b); знак питання (?) відповідає одному символу; а дужки, що"
" містять символи, розділені дефісом ([0-9]), відповідають будь-якому "
"символу між ними (у цьому випадку від 0 до 9). Ви також можете "
"використовувати дві зірочки для вкладених каталогів; a/\\*\\*/z буде "
"відповідати *a/z*, *a/b/z*, *a/b/c/z* і так далі."

#: ../../src/vcs/basics.txt:344
msgid "Viewing the commit history"
msgstr "Перегляд історії коммітів"

#: ../../src/vcs/basics.txt:346
msgid ""
"After you have created several commits, or if you have cloned a "
"repository with an existing commit history, you'll probably want to look "
"back to see what has happened. The most basic and powerful tool to do "
"this is the ``git log`` command."
msgstr ""
"Після того, як ви створили кілька коммітів, або якщо ви клонували сховище"
" з існуючою історією коммітів, ви, ймовірно, захочете озирнутися назад, "
"щоб побачити, що сталося. Найпростішим і найпотужнішим інструментом для "
"цього є команда ``git log``."

#: ../../src/vcs/basics.txt:372
msgid ""
"By default, with no arguments, ``git log`` lists the commits made in that"
" repository in reverse chronological order; that is, the most recent "
"commits show up first. As you can see, this command lists each commit "
"with its SHA-1 checksum, the author's name and email, the date written, "
"and the commit message."
msgstr ""
"За замовчуванням, без аргументів, ``git log`` виводить список коммітів, "
"зроблених у цьому сховищі, у зворотному хронологічному порядку; тобто, "
"найновіші комміти показуються першими. Як ви можете бачити, ця команда "
"показує кожне внесення з його контрольною сумою SHA-1, ім'ям та "
"електронною адресою автора, датою створення та повідомленням про "
"внесення."

#: ../../src/vcs/basics.txt:378
msgid ""
"One of the more helpful options is ``-p`` or ``--patch``, which shows the"
" difference (the *patch* output) introduced in each commit. You can also "
"limit the number of log entries displayed, such as using ``-<number>`` to"
" show only desired number of latest entries."
msgstr ""
"Однією з найбільш корисних опцій є ``-p`` або ``--patch``, яка показує "
"відмінності (виведення *patch*), внесені у кожну фіксацію. Ви також "
"можете обмежити кількість відображуваних записів, наприклад, за допомогою"
" ``-<number>``, щоб показати лише потрібну кількість останніх записів."

#: ../../src/vcs/basics.txt:414
msgid ""
"This option display the same information but with a diff directly "
"following each entry. This is very helpful for code review or to quickly "
"browse what happened during a series of commits that a collaborator has "
"added. You can also use a series of summarizing options with ``git log``."
msgstr ""
"Цей параметр показує ту саму інформацію, але з різницею безпосередньо "
"після кожного запису. Це дуже корисно для перегляду коду або для швидкого"
" перегляду того, що сталося під час серії коммітів, доданих співавторами."
" Ви також можете скористатися низкою параметрів підсумовування за "
"допомогою ``git log``."

#: ../../src/vcs/basics.txt:419
msgid ""
"If you want to see some abbreviated stats for each commit, you can use "
"the ``--stat`` option:"
msgstr ""
"Якщо ви хочете побачити скорочену статистику для кожного коміту, ви "
"можете скористатися опцією ``--stat``:"

#: ../../src/vcs/basics.txt:443
msgid ""
"Another really useful option is ``--pretty``. This option changes the log"
" output to formats other that the default. A few prebuilt option values "
"are available for you to use. The ``oneline`` value for this option "
"prints each commit on a single line, which is useful if you're look a lot"
" of commits. In addition, the ``short``, ``full``, and ``fuller`` values "
"show the output in roughly the same format but with less or more "
"information."
msgstr ""
"Ще одним дійсно корисним параметром є ``--pretty``. Цей параметр змінює "
"формат виведення журналу на формат, відмінний від стандартного. Ви можете"
" скористатися кількома готовими значеннями цього параметра. Значення "
"``oneline`` для цього параметра виводить кожну фіксацію в одному рядку, "
"що є корисним, якщо ви переглядаєте багато фіксацій. Крім того, значення "
"``short``, ``full`` і ``fuller`` показують виведення у приблизно "
"однаковому форматі, але з меншою або більшою кількістю інформації."

#: ../../src/vcs/basics.txt:476
msgid "Specifier"
msgstr "Специфікатор"

#: ../../src/vcs/basics.txt:476
msgid "Description of Output"
msgstr "Опис Результатів"

#: ../../src/vcs/basics.txt:478
msgid "%H"
msgstr "%H"

#: ../../src/vcs/basics.txt:478
msgid "Commit hash"
msgstr "Хеш комміту"

#: ../../src/vcs/basics.txt:480
msgid "%h"
msgstr "%h"

#: ../../src/vcs/basics.txt:480
msgid "Abbreviated commit hash"
msgstr "Скорочений хеш коміту"

#: ../../src/vcs/basics.txt:482
msgid "%T"
msgstr "%T"

#: ../../src/vcs/basics.txt:482
msgid "Tree hash"
msgstr "Дерево хешу"

#: ../../src/vcs/basics.txt:484
msgid "%t"
msgstr "%t"

#: ../../src/vcs/basics.txt:484
msgid "Abbreviated tree hash"
msgstr "Скорочений хеш дерева"

#: ../../src/vcs/basics.txt:486
msgid "%P"
msgstr "%P"

#: ../../src/vcs/basics.txt:486
msgid "Parent hashes"
msgstr "Батьківські хеші"

#: ../../src/vcs/basics.txt:488
msgid "%p"
msgstr "%p"

#: ../../src/vcs/basics.txt:488
msgid "Abbreviated parent hashes"
msgstr "Скорочені батьківські хеші"

#: ../../src/vcs/basics.txt:490
msgid "%an"
msgstr "%an"

#: ../../src/vcs/basics.txt:490
msgid "Author name"
msgstr "Ім'я автора"

#: ../../src/vcs/basics.txt:492
msgid "%ae"
msgstr "%ae"

#: ../../src/vcs/basics.txt:492
msgid "Author email"
msgstr "Електронна пошта автора"

#: ../../src/vcs/basics.txt:494
msgid "%ad"
msgstr "%ad"

#: ../../src/vcs/basics.txt:494
msgid "Author date (format respects the --date=option)"
msgstr "Дата автора (формат відповідає параметру --date=option)"

#: ../../src/vcs/basics.txt:496
msgid "%ar"
msgstr "%ar"

#: ../../src/vcs/basics.txt:496
msgid "Author date, relative"
msgstr "Дата автора, відносна"

#: ../../src/vcs/basics.txt:498
#, python-format
msgid "%cn"
msgstr "%cn"

#: ../../src/vcs/basics.txt:498
msgid "Committer name"
msgstr "Ім'я коммітера"

#: ../../src/vcs/basics.txt:500
#, python-format
msgid "%ce"
msgstr "%ce"

#: ../../src/vcs/basics.txt:500
msgid "Committer email"
msgstr "Електронна пошта коммітера"

#: ../../src/vcs/basics.txt:502
#, python-format
msgid "%cd"
msgstr "%cd"

#: ../../src/vcs/basics.txt:502
msgid "Committer date"
msgstr "Дата коммітера"

#: ../../src/vcs/basics.txt:504
#, python-format
msgid "%cr"
msgstr "%cr"

#: ../../src/vcs/basics.txt:504
msgid "Committer date, relative"
msgstr "Дата коммітера, відносна"

#: ../../src/vcs/basics.txt:506
#, python-format
msgid "%s"
msgstr "%s"

#: ../../src/vcs/basics.txt:506
msgid "Subject"
msgstr "Тема"

#: ../../src/vcs/basics.txt:509
msgid ""
"The ``oneline`` and ``format`` option values are particularly useful with"
" another ``log`` option called ``--graph``. This option adds a nice "
"little ASCII graph showing your branch and merge history:"
msgstr ""
"Значення параметрів ``online`` і ``format`` особливо корисні з іншим "
"параметром ``log``, який називається ``--graph``. Цей параметр додає "
"невеликий гарний графік у форматі ASCII, який показує історію ваших гілок"
" і злиття:"

#: ../../src/vcs/basics.txt:538
msgid ""
"There are many more output-formatting options to ``git log``. Common "
"options to ``git log`` are:"
msgstr ""
"Існує набагато більше варіантів форматування виводу для ``git log``. "
"Загальними параметрами ``git log`` є наступні:"

#: ../../src/vcs/basics.txt:542
msgid "Option"
msgstr "Опція"

#: ../../src/vcs/basics.txt:542
msgid "Description"
msgstr "Опис"

#: ../../src/vcs/basics.txt:544
msgid "-p"
msgstr "-p"

#: ../../src/vcs/basics.txt:544
msgid "Show the patch introduced with each commit."
msgstr "Показувати виправлення, внесені з кожним коммітом."

#: ../../src/vcs/basics.txt:546
msgid "--stat"
msgstr "--stat"

#: ../../src/vcs/basics.txt:546
msgid "Show statistics for files modified in each commit."
msgstr "Показувати статистику для файлів, змінених у кожному коміті."

#: ../../src/vcs/basics.txt:548
msgid "--shortstat"
msgstr "--shortstat"

#: ../../src/vcs/basics.txt:548
msgid ""
"Display only the changed/insertions/deletions line from the --stat "
"command."
msgstr "Відображати лише змінений/вставлений/видалений рядок з команди --stat."

#: ../../src/vcs/basics.txt:551
msgid "--name-only"
msgstr "--name-only"

#: ../../src/vcs/basics.txt:551
msgid "Show the list of files modified after the commit information."
msgstr "Показати список файлів, змінених після фіксації інформації."

#: ../../src/vcs/basics.txt:554
msgid "--name-status"
msgstr "--name-status"

#: ../../src/vcs/basics.txt:554
msgid ""
"Show the list of files affected with added/modified/deleted information "
"as well."
msgstr ""
"Також покажіть список файлів, яких торкнулася додана/змінена/видалена "
"інформація."

#: ../../src/vcs/basics.txt:557
msgid "--abbrev-commit"
msgstr "--abbrev-commit"

#: ../../src/vcs/basics.txt:557
msgid ""
"Show only the first few characters of the SHA-1 checksum instead of all "
"40."
msgstr ""
"Показувати лише перші кілька символів контрольної суми SHA-1 замість усіх"
" 40."

#: ../../src/vcs/basics.txt:560
msgid "--relative-date"
msgstr "--relative-date"

#: ../../src/vcs/basics.txt:560
msgid ""
"Display the date in a relative format (for example, \"2 weeks ago\") "
"instead of using the full date format."
msgstr ""
"Відображати дату у відносному форматі (наприклад, \"2 тижні тому\") "
"замість повного формату дати."

#: ../../src/vcs/basics.txt:563
msgid "--graph"
msgstr "--graph"

#: ../../src/vcs/basics.txt:563
msgid ""
"Display an ASCII graph of the branch and merge history beside the log "
"output."
msgstr ""
"Відобразити ASCII-графік гілки та історію злиття поряд з виведенням "
"журналу."

#: ../../src/vcs/basics.txt:566
msgid "--pretty"
msgstr "--pretty"

#: ../../src/vcs/basics.txt:566
msgid ""
"Show commits in an alternate format. Option values include oneline, "
"short, full, fuller, and format (where you specify your own format)."
msgstr ""
"Показувати комміти в альтернативному форматі. Значення опції включають: "
"online, short, full, fuller і format (де ви можете вказати свій власний "
"формат)."

#: ../../src/vcs/basics.txt:570
msgid "--oneline"
msgstr "--oneline"

#: ../../src/vcs/basics.txt:570
msgid "Shorthand for --pretty=oneline --abbrev-commit used together."
msgstr "Скорочення для --pretty=online --abbrev-commit, що використовується разом."

#: ../../src/vcs/basics.txt:575
msgid "Limiting log output"
msgstr "Обмеження виводу журналу"

#: ../../src/vcs/basics.txt:577
msgid ""
"In addition to output-formatting options, ``git log`` takes a number of "
"useful limiting options; that is options that let you show only a subset "
"of commits. You've seen one such option already -- the ``-<number>`` "
"(e.g. ``-2`` or ``-10``) option, which displays only the given number of "
"latest commits."
msgstr ""
"На додаток до параметрів форматування виводу, ``git log`` приймає ряд "
"корисних обмежувальних параметрів, тобто параметрів, які дозволяють вам "
"показувати лише підмножину коммітів. Ви вже бачили одну з таких опцій - "
"``-<число>`` (наприклад, ``-2`` або ``-10``), яка показує лише вказану "
"кількість останніх коммітів."

#: ../../src/vcs/basics.txt:591
msgid ""
"However, the time-limiting options such as ``--since`` and ``--until`` "
"are very useful. For example, the command to get the list of commits made"
" in the last two weeks:"
msgstr ""
"Однак, дуже корисними є опції, що обмежують час, такі як ``--since`` і "
"``--until``. Наприклад, команда для отримання списку коммітів, зроблених "
"за останні два тижні:"

#: ../../src/vcs/basics.txt:599
msgid ""
"This command works with lots of formats - you can specify a specific date"
" like ``\"2022-02-24\"``, or relative date such as ``\"2 years 1 days 3 "
"minutes ago\"``."
msgstr ""
"Ця команда працює з багатьма форматами - ви можете вказати конкретну "
"дату, наприклад, ``\"2022-02-24\"``, або відносну дату, наприклад, ``\"2 "
"роки 1 день 3 хвилини тому\"``."

#: ../../src/vcs/basics.txt:602
msgid ""
"The last really useful option to pass to ``git log`` as a filter is a "
"path. If you specify a directory or file name, you can limit the log "
"output to commits that introduced a change to those files. This is always"
" the last option and is generally preceded by double dashes (``--``) to "
"separate the paths from the options:"
msgstr ""
"Останньою дійсно корисною опцією, яку можна передати ``git log`` як "
"фільтр, є шлях. Якщо ви вкажете каталог або ім'я файлу, ви зможете "
"обмежити виведення журналу лише тими комітами, які внесли зміни до цих "
"файлів. Це завжди останній параметр, і йому зазвичай передують подвійні "
"тире (``--``), щоб відокремити шлях від параметрів:"

#: ../../src/vcs/basics.txt:621
msgid "Undoing things"
msgstr "Виправлення помилок"

#: ../../src/vcs/basics.txt:623
msgid "At any stage, you may want to undo something."
msgstr "На будь-якому етапі ви можете захотіти щось виправити."

#: ../../src/vcs/basics.txt:625
msgid ""
"One of the common undos takes place when you commit too early and "
"possibly forget to add some files, or you mess up your commit message. If"
" you want to redo that commit, make the additional changes you forgot, "
"stage them, and commit again using the ``--amend`` option:"
msgstr ""
"Одне з найпоширеніших випадків скасування відбувається, коли ви "
"коммітуєте занадто рано і, можливо, забуваєте додати деякі файли, або ви "
"псуєте своє повідомлення про коммітування. Якщо ви хочете повторити "
"фіксацію, внесіть додаткові зміни, про які ви забули, збережіть їх і "
"зафіксуйте ще раз, використовуючи опцію ``--amend``:"

#: ../../src/vcs/basics.txt:634
msgid "E.g."
msgstr "Наприклад."

#: ../../src/vcs/basics.txt:643
msgid "Unstaging a staged file"
msgstr "Скасування додавання файла до індексу"

#: ../../src/vcs/basics.txt:645
msgid ""
"The next two sections demonstrate how to work with your staging area and "
"working directory changes. The nice part is that the command you use to "
"determine the state of those two areas also reminds you how to undo "
"changes to them."
msgstr ""
"У наступних двох розділах продемонстровано, як працювати зі змінами у "
"вашій збірці та робочому каталозі. Приємним моментом є те, що команда, за"
" допомогою якої ви визначаєте стан цих двох областей, також нагадує вам "
"про те, як скасувати внесені до них зміни."

#: ../../src/vcs/basics.txt:676
msgid "Unmodifiyng a modified file"
msgstr "Скасування модифікації зміненого файлу"

#: ../../src/vcs/basics.txt:678
msgid ""
"What if you realize that you don't want to keep your changes to some "
"file? You can easily unmodify it -- **revert** it back to what it looked "
"like when you last committed. ``git status`` also tells you how to do "
"that:"
msgstr ""
"Що робити, якщо ви зрозуміли, що не хочете зберігати зміни у якомусь "
"файлі? Ви можете легко скасувати зміни - **повернути** його до того, як "
"він виглядав під час останнього компонування. ``git status`` також покаже"
" вам, як це зробити:"

#: ../../src/vcs/basics.txt:686
msgid "It tells you pretty explicitly how to discard the changes you've make."
msgstr "Він досить чітко розповідає, як відкинути зміни, які ви зробили."

#: ../../src/vcs/basics.txt:699
msgid "Undoing things with git restore"
msgstr "Скасування змін за допомогою git restore"

#: ../../src/vcs/basics.txt:701
msgid ""
"``git restore`` is basically an alternative to ``git reset``, from Git "
"version 2.23.0 onwards, Git will use ``git restore`` instead of ``git "
"reset`` for many undo operations."
msgstr ""
"``git restore`` є альтернативою ``git reset``, починаючи з версії 2.23.0,"
" Git використовуватиме ``git restore`` замість ``git reset`` для багатьох"
" операцій скасування."

#: ../../src/vcs/basics.txt:737
msgid ""
"It’s important to understand that git restore <file> is a dangerous "
"command. Any local changes you made to that file are gone -- Git just "
"replaced that file with the last staged or committed version. Don't ever "
"use this command unless you absolutely know that you don’t want those "
"unsaved local changes."
msgstr ""
"Важливо розуміти, що відновлення git'ом <файлу> є небезпечною командою. "
"Усі локальні зміни, які ви зробили у цьому файлі, буде втрачено - Git "
"просто замінить цей файл на останню версію, що перебуває у стадії "
"виконання або фіксації. Ніколи не використовуйте цю команду, якщо ви "
"точно не знаєте, що вам не потрібні ці незбережені локальні зміни."

#: ../../src/vcs/branch.txt:-1
msgid "version, control, system, vcs, git, branch, merge, cherry-pick"
msgstr "version, control, system, vcs, git, branch, merge, cherry-pick"

#: ../../src/vcs/branch.txt:8
msgid "Branches and Merging"
msgstr "Гілки та злиття"

#: ../../src/vcs/branch.txt:11 ../../src/vcs/pullrequest.txt:59
msgid "About branches"
msgstr "Про гілки"

#: ../../src/vcs/branch.txt:13
msgid ""
"To really understand the way Git does branching, we need to take a step "
"back and examine how Git stores its data. Git doesn't store data as a "
"series of changesets or differences, but instead as a series of "
"snapshots. When you make a commit, Git stores a commit object that "
"contains a pointer to the snapshot of the content you staged. This object"
" also contains the author's name and email address, the message that you "
"typed, and pointers to the commit or commits that directly came before "
"this commit (its parent or parents): zero parents for the initial commit,"
" one parent for a normal commit, and multiple parents for a commit that "
"results from a merge of two or more branches."
msgstr ""
"Щоб по-справжньому зрозуміти, як Git працює з розгалуженнями, нам "
"потрібно зробити крок назад і розглянути, як Git зберігає свої дані. Git "
"зберігає дані не у вигляді серії наборів змін або відмінностей, а у "
"вигляді серії знімків. Коли ви робите коміт, Git зберігає об'єкт коміту, "
"який містить вказівник на створений вами знімок вмісту. Цей об'єкт також "
"містить ім'я та адресу електронної пошти автора, повідомлення, яке ви "
"набрали, і вказівники на комміт або комміти, які безпосередньо передували"
" цьому комміту (його батька або батьків): нульовий батько для початкового"
" комміту, один батько для звичайного комміту і кілька батьків для "
"комміту, який є результатом злиття двох або більше гілок."

#: ../../src/vcs/branch.txt:28
msgid ""
"A branch in Git is simply a lightweight movable pointer to one of these "
"commits. The default branch name in Git is master. As you start making "
"commits, you're given a master branch that points to the last commit you "
"made. Every time you commit, the master branch pointer moves forward "
"automatically."
msgstr ""
"Гілка в Git'і - це просто легкий рухомий вказівник на одну з цих "
"коммітів. Стандартна назва гілки у Git'і - master. Коли ви починаєте "
"робити комміти, ви отримуєте головну гілку, яка вказує на останній "
"зроблений вами комміт. Кожного разу, коли ви робите комміт, вказівник "
"головної гілки автоматично пересувається вперед."

#: ../../src/vcs/branch.txt:38
msgid "Branch management"
msgstr "Управління гілками"

#: ../../src/vcs/branch.txt:40
msgid ""
"The ``git branch`` command does more that create and delete branches. If "
"you run it with no arguments, you get a simple listing of your current "
"branches:"
msgstr ""
"Команда ``git branch`` робить більше, ніж просто створює і видаляє гілки."
" Якщо ви запустите її без аргументів, ви отримаєте простий список ваших "
"поточних гілок:"

#: ../../src/vcs/branch.txt:55
msgid ""
"To see all the branches that contain work you haven't yet merged in, use "
"``--no-merged`` option:"
msgstr ""
"Щоб побачити всі гілки, які містять роботи, до яких ви ще не приєдналися,"
" використовуйте опцію ``--no-merged``:"

#: ../../src/vcs/branch.txt:65
msgid ""
"Branches listed in the output has work, that isn't merged to current "
"branch. So, deleting them via ``git branch -d`` will fail."
msgstr ""
"У гілках, перелічених у виводі, є напрацювання, які не злито з поточною "
"гілкою. Отже, їх видалення за допомогою ``git branch -d`` не спрацює."

#: ../../src/vcs/branch.txt:69
msgid "Create branches"
msgstr "Створення гілок"

#: ../../src/vcs/branch.txt:71
msgid ""
"There are few ways to create a new branch in a Git repository. The most "
"common way is to use ``git branch`` command."
msgstr ""
"Існує декілька способів створити нову гілку в Git-сховищі. Найпоширеніший"
" з них - використання команди ``git branch``."

#: ../../src/vcs/branch.txt:78
msgid ""
"Pointer to a parent commit is optional. By default the parent commit is "
"set to the latest one available (HEAD pointer) at the moment of the "
"branch creation. You can also switch to the newly created branch just "
"after its creation using:"
msgstr ""
"Вказівник на батьківський коміт не є обов'язковим. За замовчуванням "
"батьківський коміт встановлюється на найновіший доступний (вказівник "
"HEAD) на момент створення гілки. Ви також можете переключитися на "
"новостворену гілку одразу після її створення за допомогою:"

#: ../../src/vcs/branch.txt:88
msgid "Switching branches"
msgstr "Перемикання гілок"

#: ../../src/vcs/branch.txt:90
msgid "To switch to an existing branch, you run the ``git checkout`` command."
msgstr "Щоб перейти до існуючої гілки, виконайте команду ``git checkout``."

#: ../../src/vcs/branch.txt:109
msgid "Basic branching and merging"
msgstr "Основи розгалуження та злиття"

#: ../../src/vcs/branch.txt:111
msgid ""
"First, let's say you're working on your project and have a couple of "
"commits already on the ``master`` branch. You've decided that you're "
"going to work on issue #53 in whatever issue-tracking system your company"
" uses. To create a new branch and switch to it at the same time, you can "
"run the ``git checkout`` command with the ``-b`` switch:"
msgstr ""
"По-перше, припустимо, що ви працюєте над своїм проектом і вже маєте "
"кілька комітів на гілці ``master``. Ви вирішили, що будете працювати над "
"issue #53 в будь-якій системі відстеження проблем, яку використовує ваша "
"компанія. Щоб створити нову гілку і одночасно переключитися на неї, ви "
"можете виконати команду ``git checkout`` з ключем ``-b``:"

#: ../../src/vcs/branch.txt:122
msgid "This is shorthand for:"
msgstr "Це скорочено означає:"

#: ../../src/vcs/branch.txt:129
msgid ""
"In deed this creates a new branch pointer, aimed to the latest commit "
"present on ``master`` branch. But, from now your branch is "
"``feature/issue53``. So, doing commits moves the feature branch pointer "
"forward, because you have it checkout out (that is, your ``HEAD`` is "
"pointing to it)."
msgstr ""
"Насправді це створить новий покажчик гілки, спрямований на останню "
"фіксацію, наявну у гілці ``master``. Але відтепер ваша гілка називається "
"``feature/issue53``. Отже, виконання коммітів пересуває вказівник гілки "
"feature вперед, тому що ви її вилучили (тобто ваша ``HEAD`` вказує на "
"неї)."

#: ../../src/vcs/branch.txt:134
msgid ""
"Now, lets assume the \"issue53\" is fixed, and you need to bring commits "
"from the ``feature/issue53`` branch back to ``master``."
msgstr ""
"Тепер припустимо, що \"issue53\" виправлено, і вам потрібно перенести "
"коміти з гілки ``feature/issue53`` назад до ``master``."

#: ../../src/vcs/branch.txt:138
msgid "Merging branches"
msgstr "Злиття гілок"

#: ../../src/vcs/branch.txt:140
msgid ""
"You need to switch back to ``master`` branch and use ``git merge`` "
"command, to merge changes (commits) from the source branch into target."
msgstr ""
"Вам потрібно повернутися до гілки ``master`` і скористатися командою "
"``git merge``, щоб об'єднати зміни (коміти) з вихідної гілки в цільову."

#: ../../src/vcs/branch.txt:152
msgid ""
"You'll notice phrase \"fast-forward\" in that merge. Because the commit "
"pointed to by the branch ``feature/issue53`` you merged in was directly "
"ahead of the last commit on ``master`` branch, Git simply moves the "
"pointer forward."
msgstr ""
"Ви помітите фразу \"перемотування вперед\" у цьому злитті. Оскільки "
"коміт, на який вказує гілка ``feature/issue53``, до якої ви приєдналися, "
"був безпосередньо перед останнім комітом у гілці ``master``, Git просто "
"пересуне вказівник вперед."

#: ../../src/vcs/branch.txt:156
msgid ""
"Changes from ``feature/issue53`` are now in the snapshot of the commit "
"pointed to by the ``master`` branch."
msgstr ""
"Зміни з ``feature/issue53`` тепер містяться у знімку коміту, на який "
"вказує гілка ``master``."

#: ../../src/vcs/branch.txt:163
msgid ""
"Now, lets assume another developer started working on ``feature/issue54``"
" at the same time. And there are few commits on this feature branch. "
"Suppose, the developer decided that work on **issue54** is finished and "
"they want to merge their feature branch into ``master``."
msgstr ""
"Тепер припустимо, що інший розробник почав працювати над "
"``feature/issue54`` в той самий час. І у цій гілці мало комітів. "
"Припустимо, що розробник вирішив, що робота над **issue54** завершена і "
"він хоче об'єднати свою гілку з ``master``."

#: ../../src/vcs/branch.txt:179
msgid ""
"This looks a bit different than the ``feature/issue53`` merge. In this "
"case, development history has diverged from some older point. Because the"
" commit on the branch you're on isn't a direct ancestor of the branch "
"you're merging in, Git has to do some work. In this case, Git does a "
"simple three-way merge, using two snapshots pointed to by the branch tips"
" and the common ancestor of the two."
msgstr ""
"Це виглядає дещо інакше, ніж злиття ``функція/випуск53``. У цьому випадку"
" історія розробки розійшлася з якоїсь давнішої точки. Оскільки коміт на "
"гілці, в якій ви перебуваєте, не є прямим предком гілки, в яку ви "
"виконуєте злиття, Git'у доведеться виконати деяку роботу. У цьому випадку"
" Git виконує просте тристороннє злиття, використовуючи два знімки, на які"
" вказують кінчики гілок, і їхнього спільного предка."

#: ../../src/vcs/branch.txt:186
msgid ""
"Instead of just moving the branch pointer forward, Git creates a new "
"snapshot that results from this three-way merge and automatically creates"
" a new commit that points to it. This is referred to as a *merge commit*,"
" and is a special in that it has more than one parent."
msgstr ""
"Замість того, щоб просто перемістити вказівник гілки вперед, Git створює "
"новий знімок, який є результатом цього тристороннього злиття, і "
"автоматично створює новий коміт, який вказує на нього. Це називається "
"*коммітом злиття*, і він особливий тим, що має більше одного батька."

#: ../../src/vcs/branch.txt:196
msgid "Merge conflicts"
msgstr "Конфлікти об'єднання"

#: ../../src/vcs/branch.txt:198
msgid ""
"Occasionally, the merge process doesn't go smoothly. If the same part of "
"the same file is changed differently in the two branches you're merging, "
"Git won't be able to merge them cleanly."
msgstr ""
"Іноді процес злиття відбувається не зовсім гладко. Якщо у двох гілках, "
"які ви об'єднуєте, однакова частина одного і того ж файлу змінена "
"по-різному, Git не зможе об'єднати їх чисто."

#: ../../src/vcs/branch.txt:209
msgid ""
"Git hasn't automatically created a new merge commit. It has paused the "
"process while you resolve the conflict. If you want to see which files "
"are unmerged at any point after a merge conflict, you can run ``git "
"status``:"
msgstr ""
"Git не створив автоматично новий коміт злиття. Він призупинив процес, "
"поки ви вирішуєте конфлікт. Якщо ви хочете побачити, які файли було "
"від'єднано після конфлікту злиття, ви можете запустити ``git status``:"

#: ../../src/vcs/branch.txt:228
msgid ""
"Anything that has merge conflicts and hasn't been resolved is listed as "
"unmerged. Git adds standard conflict-resolution markers to the files that"
" have conflicts, so you can open them manually and resolve those "
"conflicts. Your file contains a section that looks something like this:"
msgstr ""
"Все, що має конфлікти злиття, які не було вирішено, позначається як не "
"об'єднане. Git додає стандартні маркери вирішення конфліктів до файлів, "
"які мають конфлікти, щоб ви могли відкрити їх вручну і вирішити ці "
"конфлікти. Ваш файл містить розділ, який виглядає приблизно так:"

#: ../../src/vcs/branch.txt:243
msgid ""
"This means the version in ``HEAD`` (your ``master`` branch, because that "
"was what you had checked out when you ran merge command) is the top part "
"of that block (everything above the \"=======\"), while the version in "
"``vcs`` branch looks like everything in the bottom part. In order to "
"resolve the conflict, you have to either choose one side or the other or "
"merge the contents yourself."
msgstr ""
"Це означає, що версія у гілці ``HEAD`` (ваша гілка ``master``, тому що "
"саме її ви перевірили, коли виконували команду merge) - це верхня частина"
" блоку (все, що вище \"=======\"), тоді як версія у гілці ``vcs`` "
"виглядає як все, що знаходиться у нижній частині. Для того, щоб вирішити "
"конфлікт, вам доведеться або стати на чийсь бік, або об'єднати вміст "
"самостійно."

#: ../../src/vcs/branch.txt:249
msgid "When conflicts are resolved, you can run ``git status`` command again:"
msgstr ""
"Коли конфлікти буде вирішено, ви можете знову запустити команду ``git "
"status``:"

#: ../../src/vcs/branch.txt:262
msgid ""
"If you're happy with that, and you verify that everything that had "
"conflicts has been staged, you can run ``git commit`` for finalize the "
"merge commit."
msgstr ""
"Якщо вас все влаштовує, і ви переконалися, що все, що викликало "
"конфлікти, було усунуто, ви можете запустити ``git commit`` для "
"остаточного завершення злиття."

#: ../../src/vcs/branch.txt:266
msgid "Rebasing"
msgstr "Перебазування"

#: ../../src/vcs/branch.txt:268
msgid ""
"In Git, there two main ways to integrate changes from one branch into "
"another: the ``merge`` and the ``rebase``."
msgstr ""
"У Git'і існує два основних способи інтеграції змін з однієї гілки в іншу:"
" \"злиття\" і \"перебазування\"."

#: ../../src/vcs/branch.txt:271
msgid ""
"Earlier, there was an example of diverged work and commits made on two "
"different branches."
msgstr ""
"Раніше ми вже наводили приклад розбіжностей у роботі та зобов'язаннях, "
"зроблених на двох різних гілках."

#: ../../src/vcs/branch.txt:278
msgid ""
"The easiest way to integrate the branches, as we've already covered, is "
"the ``merge`` command. It performs a three-way merge between the two "
"latest branch snapshots, and the most recent common ancestor of the two, "
"creating a new snapshot (and commit)."
msgstr ""
"Найпростішим способом об'єднання гілок, як ми вже розглядали, є команда "
"``merge``. Вона виконує тристороннє злиття між двома останніми знімками "
"гілок і останнім спільним предком, створюючи новий знімок (і фіксацію)."

#: ../../src/vcs/branch.txt:283
msgid ""
"However, there is another way: you can take the patch of the change that "
"was introduced in ``master`` and reapply it on top of ``feature``. In "
"Git, this is called *rebasing*. With ``rebase`` command, you can take all"
" the changes that were committed on one branch and replay them on a "
"different branch."
msgstr ""
"Втім, є й інший спосіб: ви можете взяти патч зі змінами, які було внесено"
" до ``master``, і повторно застосувати його поверх ``feature``. У Git'і "
"це називається *rebasing*. За допомогою команди ``rebase`` ви можете "
"взяти всі зміни, які були зафіксовані на одній гілці, і відтворити їх на "
"іншій гілці."

#: ../../src/vcs/branch.txt:295
msgid ""
"This operation works by going to the common ancestor of the two branches,"
" getting the diff introduced by each commit of the branch you're on, "
"saving those diffs to temporary files, resetting the current branch to "
"the same commit as the branch you are rebasing onto, and finally applying"
" each change in turn."
msgstr ""
"Ця операція виконується шляхом переходу до спільного предка двох гілок, "
"отримання відмінностей, внесених кожним коммітом гілки, на якій ви "
"перебуваєте, збереження цих відмінностей у тимчасових файлах, скидання "
"поточної гілки до того ж комміту, що і гілка, на яку ви перебазуєтесь, і,"
" нарешті, застосування кожної зміни по черзі."

#: ../../src/vcs/branch.txt:306
msgid ""
"Other maintainers prefer to rebase (or cherry-pick) contributed work on "
"top of their ``master`` branch, rather then merging it in, to keep a "
"mostly linear history."
msgstr ""
"Інші супроводжувачі надають перевагу перезавантаженню (або вилученню) "
"внесених напрацювань на вершині своєї \"головної\" гілки, замість того, "
"щоб об'єднувати їх, щоб зберегти переважно лінійну історію."

#: ../../src/vcs/branch.txt:311
msgid "Cherry-picking"
msgstr "Cherry-picking"

#: ../../src/vcs/branch.txt:313
msgid ""
"The other way to move introduced work from one branch to another is to "
"*cherry-pick* it. A cherry-pick in Git is a rebase for a single commit. "
"It takes the patch that was introduced in a commit and tries to reapply "
"it on the branch you're currently on. This is useful if you have a number"
" of commits on a topic branch and you want to integrate only one of them,"
" or if you only have one commit on a topic branch and you'd prefer to "
"cherry-pick it rather than run rebase."
msgstr ""
"Інший спосіб перенесення внесеної роботи з однієї гілки в іншу - це "
"\"збирання коммітів\" (cherry-pick). Збирання вишень у Git'і - це "
"відновлення бази для одного коміту. Він бере патч, який було внесено в "
"комміті, і намагається повторно застосувати його на гілці, на якій ви "
"зараз перебуваєте. Це корисно, якщо ви маєте декілька коммітів у гілці "
"теми і хочете інтегрувати лише один з них, або якщо ви маєте лише один "
"комміт у гілці теми і вважаєте за краще вибрати його замість того, щоб "
"запускати rebase."

#: ../../src/vcs/branch.txt:333
msgid "Branching strategies"
msgstr "Стратегії розгалуження"

#: ../../src/vcs/branch.txt:335
msgid ""
"Branching strategy in version control systems defines how branches are "
"created, managed, and used in a project's development process. It helps "
"teams collaborate effectively, isolate changes, and organize development "
"efforts. A good branching strategy provides clarity on how to work with "
"branches, minimizes conflicts, and enables a smooth and structured "
"development workflow."
msgstr ""
"Стратегія розгалуження в системах контролю версій визначає, як "
"створюються, управляються та використовуються гілки в процесі розробки "
"проекту. Вона допомагає командам ефективно співпрацювати, ізолювати зміни"
" та організовувати зусилля з розробки. Хороша стратегія розгалуження "
"забезпечує чіткість у роботі з гілками, мінімізує конфлікти та уможливлює"
" плавний і структурований робочий процес розробки."

#: ../../src/vcs/branch.txt:342
msgid ""
"GitFlow is a popular branching strategy that provides a well-defined "
"model for managing branches in a Git repository. It was introduced by "
"Vincent Driessen and is based on the idea of using two main branches: "
"\"master\" and \"develop.\""
msgstr ""
"GitFlow - це популярна стратегія розгалуження, яка надає чітко визначену "
"модель для управління гілками в Git-репозиторії. Вона була представлена "
"Вінсентом Дріссеном (Vincent Driessen) і базується на ідеї використання "
"двох основних гілок: \"master\" і \"develop\"."

#: ../../src/vcs/branch.txt:346
msgid ""
"**Master Branch**: The \"master\" branch represents the stable version of"
" the codebase. It should always contain production-ready code and be free"
" from any major issues. The \"master\" branch is protected, and only "
"release versions are merged into it."
msgstr ""
"**Майстер-гілка**: \"Майстер-гілка\" представляє стабільну версію кодової"
" бази. Вона завжди повинна містити готовий до використання код і не "
"містити жодних серйозних проблем. Майстер-гілка захищена, і в неї "
"зливаються тільки релізні версії."

#: ../../src/vcs/branch.txt:350
msgid ""
"**Develop Branch**: The \"develop\" branch is where the ongoing "
"development and integration of features take place. It serves as the "
"integration branch for various feature branches and should also contain a"
" stable version of the code."
msgstr ""
"**Гілка розробки**: Гілка \"develop\" - це місце, де відбувається "
"постійна розробка та інтеграція функцій. Вона слугує інтеграційною гілкою"
" для різних функціональних гілок, а також повинна містити стабільну "
"версію коду."

#: ../../src/vcs/branch.txt:354
msgid ""
"**Feature Branches**: For each new feature or bug fix, a dedicated "
"\"feature\" branch is created off the \"develop\" branch. These branches "
"are short-lived and exist only for the duration of the feature "
"development."
msgstr ""
"**Вітки функцій**: Для кожної нової функції або виправлення помилки "
"створюється окрема гілка \"feature\" у гілці \"develop\". Ці гілки "
"недовговічні і існують лише на час розробки функції."

#: ../../src/vcs/branch.txt:357
msgid ""
"**Release Branches**: When the development on the \"develop\" branch is "
"ready for a release, a \"release\" branch is created. The release branch "
"is used for testing, bug fixing, and preparing for deployment."
msgstr ""
"**Вітки релізу**: Коли розробка на гілці \"develop\" готова до релізу, "
"створюється гілка \"release\". Релізна гілка використовується для "
"тестування, виправлення помилок і підготовки до розгортання."

#: ../../src/vcs/branch.txt:360
msgid ""
"**Hotfix Branches**: If a critical issue is discovered in the production "
"version, a \"hotfix\" branch is created from the \"master\" branch. This "
"allows for a quick fix without affecting ongoing development on the "
"\"develop\" branch."
msgstr ""
"**Гілки виправлень**: Якщо у виробничій версії виявлено критичну "
"проблему, на основі основної гілки створюється гілка \"hotfix\". Це "
"дозволяє швидко виправити проблему, не впливаючи на поточну розробку на "
"гілці \"develop\"."

#: ../../src/vcs/branch.txt:365
msgid ""
"GitFlow provides a structured approach to managing branching in a "
"collaborative development environment. It ensures that the main branches "
"remain stable, and new features and bug fixes are integrated smoothly "
"before being released. This strategy is particularly useful for projects "
"with regular releases and a team working on multiple features "
"concurrently."
msgstr ""
"GitFlow забезпечує структурований підхід до управління розгалуженням у "
"середовищі спільної розробки. Він гарантує, що основні гілки залишаються "
"стабільними, а нові функції та виправлення помилок плавно інтегруються "
"перед випуском. Ця стратегія особливо корисна для проектів з регулярними "
"випусками і командою, яка працює над декількома функціями одночасно."

#: ../../src/vcs/github.txt:-1
msgid "version, control, system, vcs, git, github"
msgstr "version, control, system, vcs, git, github"

#: ../../src/vcs/github.txt:10
msgid "GitHub"
msgstr "GitHub"

#: ../../src/vcs/github.txt:12
msgid ""
"`GitHub`_ is the single largest host for Git repositories, and is the "
"central point of collaboration for millions of developers and projects."
msgstr ""
"`GitHub`_ - найбільший хостинг для Git-репозиторіїв, який є центральною "
"точкою співпраці для мільйонів розробників і проектів."

#: ../../src/vcs/github.txt:16
msgid "Account setup and configuration"
msgstr "Налаштування та конфігурація акаунта"

#: ../../src/vcs/github.txt:18
msgid ""
"The first thing you need to do is set up a free user account. Visit "
"`GitHub`_ and press \"Sign Up\" button. The GitHub will lead you through "
"the account creation process. Just follow the hints and provide an email "
"address, username and a strong password."
msgstr ""
"Перше, що вам потрібно зробити, це створити безкоштовний обліковий запис "
"користувача. Відвідайте `GitHub`_ і натисніть кнопку \"Зареєструватися\"."
" GitHub проведе вас через процес створення облікового запису. Просто "
"дотримуйтесь підказок і вкажіть адресу електронної пошти, ім'я "
"користувача та надійний пароль."

#: ../../src/vcs/github.txt:24
msgid "About authentication to GitHub"
msgstr "Про автентифікацію на GitHub"

#: ../../src/vcs/github.txt:27
msgid ""
"Starting in March 2023 and through the end of 2023, GitHub gradually "
"began to require all users who contribute code on GitHub to enable two-"
"factor authentication (2FA)."
msgstr ""
"Починаючи з березня 2023 року і до кінця 2023 року, GitHub поступово "
"почав вимагати від усіх користувачів, які публікують код на GitHub, "
"увімкнути двофакторну автентифікацію (2FA)."

#: ../../src/vcs/github.txt:32
msgid "Connect with SSH"
msgstr "Підключення за допомогою SSH"

#: ../../src/vcs/github.txt:34
msgid ""
"You can access and write data in repositories on GitHub using :abbr:`SSH "
"(Secure Shell Protocol)`. When you connect to via SSH, you authenticate "
"using a private key file on your local machine."
msgstr ""
"Ви можете отримати доступ до даних у репозиторіях на GitHub і писати їх "
"за допомогою :abbr:`SSH (Secure Shell Protocol)`. При підключенні по SSH "
"ви автентифікуєтесь за допомогою файлу приватного ключа на вашому "
"локальному комп'ютері."

#: ../../src/vcs/github.txt:39
msgid "Generating a new SSH key"
msgstr "Генерація нового SSH-ключа"

#: ../../src/vcs/github.txt:41
msgid ""
"You can generate a new SSH key on your local machine. After you do that, "
"you can add the **public** key to your account on GitHub to enable "
"authentication for Git operations over SSH."
msgstr ""
"Ви можете згенерувати новий SSH-ключ на своїй локальній машині. Після "
"цього ви можете додати **public** ключ до свого облікового запису на "
"GitHub, щоб увімкнути автентифікацію для операцій з Git'ом через SSH."

#: ../../src/vcs/github.txt:45
msgid "Open terminal (git-bash will suite for Windows users)"
msgstr "Відкритий термінал (для користувачів Windows підійде git-bash)"

#: ../../src/vcs/github.txt:46
msgid "Run command:"
msgstr "Виконати команду:"

#: ../../src/vcs/github.txt:53
msgid ""
"If you are using a legacy system that doesn't support the **Ed25519** "
"algorithm, use:"
msgstr ""
"Якщо ви використовуєте застарілу систему, яка не підтримує алгоритм "
"**Ed25519**, використовуйте його:"

#: ../../src/vcs/github.txt:60
msgid ""
"When you're prompted to \"Enter a file in which to save the key\", you "
"can press **Enter** to accept the default file location."
msgstr ""
"Коли з'явиться запит \"Введіть файл для збереження ключа\", ви можете "
"натиснути **Enter**, щоб прийняти розташування файлу за замовчуванням."

#: ../../src/vcs/github.txt:67
msgid ""
"Type a secure passphrase, if you want -- this is an extra layer of "
"security."
msgstr ""
"Введіть безпечну парольну фразу, якщо хочете -- це додатковий рівень "
"безпеки."

#: ../../src/vcs/github.txt:75
msgid "This will create a new SSH key, using the provided email as label."
msgstr ""
"Буде створено новий SSH-ключ, з використанням наданої адреси електронної "
"пошти як мітки."

#: ../../src/vcs/github.txt:77
msgid ""
"Navigate to ssh key location -- \".ssh\" folder at your homedir by "
"default and ensure there are two files generated:"
msgstr ""
"Перейдіть до розташування ключа ssh -- теки \".ssh\" у вашому домашньому "
"каталозі за замовчуванням і переконайтеся, що згенеровано два файли:"

#: ../../src/vcs/github.txt:80
msgid "**id_ALGORITHM** (e.g. \"id_rsa\", \"id_ed252519\" etc.)"
msgstr "**id_ALGORITHM** (наприклад, \"id_rsa\", \"id_ed252519\" тощо)."

#: ../../src/vcs/github.txt:81
msgid "**id_ALGORITHM.pub** (e.g. \"id_rsa.pub\", \"id_ed25519.pub\" etc.)"
msgstr "**id_ALGORITHM.pub** (наприклад, \"id_rsa.pub\", \"id_ed25519.pub\" тощо)."

#: ../../src/vcs/github.txt:84
msgid ""
"The private key (the one without \".pub\") should be kept secure and "
"private. You should never share this."
msgstr ""
"Закритий ключ (той, що без \".pub\") слід зберігати в безпеці і не "
"розголошувати. Ви ніколи не повинні ділитися ним."

#: ../../src/vcs/github.txt:87
msgid ""
"The public key is what you add to servers or services to which you want "
"to authenticate using your private key."
msgstr ""
"Відкритий ключ - це те, що ви додаєте до серверів або сервісів, на яких "
"ви хочете пройти автентифікацію за допомогою вашого закритого ключа."

#: ../../src/vcs/github.txt:91
msgid "Adding your SSH key to the ssh-agent and GitHub"
msgstr "Додавання SSH-ключа до ssh-агента та GitHub"

#: ../../src/vcs/github.txt:93
msgid ""
"Before adding a new SSH key to the ssh-agent to manage your keys, you "
"should have checked for existing SSH keys and generated SSH keys."
msgstr ""
"Перш ніж додавати новий SSH-ключ до ssh-агента для керування ключами, вам"
" слід перевірити наявність наявних SSH-ключів і згенерувати SSH-ключі."

#: ../../src/vcs/github.txt:96
msgid ""
"Ensure the ssh-agent is running. You can use the \"Auto-launching\" or "
"start it manually:"
msgstr ""
"Переконайтеся, що ssh-агент запущено. Ви можете скористатися "
"\"Автозапуском\" або запустити його вручну:"

#: ../../src/vcs/github.txt:104
msgid "Add you SSH private key to the ssh-agent."
msgstr "Додайте ваш приватний ключ SSH до ssh-агента."

#: ../../src/vcs/github.txt:110
msgid ""
"Add the SSH public key to your account on GitHub. Copy the SSH public key"
" to your clipboard."
msgstr ""
"Додайте публічний ключ SSH до свого облікового запису на GitHub. "
"Скопіюйте відкритий ключ SSH до буфера обміну."

#: ../../src/vcs/github.txt:117
msgid ""
"Alternatively, if ``clip`` isn't working, just type public key content to"
" the terminal using ``cat``,"
msgstr ""
"Крім того, якщо ``clip`` не працює, просто введіть вміст відкритого ключа"
" у терміналі за допомогою ``cat``,"

#: ../../src/vcs/github.txt:124
msgid ""
"or simply navigate to the file and open it with any text editor. At the "
"end, you need to copy public key content."
msgstr ""
"або просто перейдіть до файлу і відкрийте його за допомогою будь-якого "
"текстового редактора. В кінці потрібно скопіювати вміст відкритого ключа."

#: ../../src/vcs/github.txt:127
msgid ""
"On GitHub, in the upper-right corner of any page, click your profile "
"photo, then click **Settings**."
msgstr ""
"На GitHub у правому верхньому куті будь-якої сторінки натисніть на "
"фотографію свого профілю, а потім натисніть **Налаштування**."

#: ../../src/vcs/github.txt:129
msgid ""
"In the \"Access\" section of the sidebar, click **SSH and GPG keys** and "
"press **New SSH key** button."
msgstr ""
"У розділі \"Доступ\" бічної панелі натисніть **Ключі SSH і GPG** і "
"натисніть кнопку **Новий ключ SSH**."

#: ../../src/vcs/github.txt:131
msgid "In the \"Title\" field, add a descriptive label for the new key."
msgstr "У полі \"Назва\" додайте описову мітку для нового ключа."

#: ../../src/vcs/github.txt:132
msgid "Select the type of key -- \"Authentication key\"."
msgstr "Виберіть тип ключа - \"Ключ автентифікації\"."

#: ../../src/vcs/github.txt:133
msgid "In the \"Key\" field, paste your public key."
msgstr "У полі \"Ключ\" вставте ваш відкритий ключ."

#: ../../src/vcs/github.txt:134
msgid "Click **Add SSH key**."
msgstr "Натисніть **Додати SSH-ключ**."

#: ../../src/vcs/github.txt:135
msgid "If prompted, confirm access to your account on GitHub."
msgstr ""
"Якщо з'явиться відповідний запит, підтвердіть доступ до свого облікового "
"запису на GitHub."

#: ../../src/vcs/index.txt:-1 ../../src/vcs/intro.txt:-1
msgid "version, control, system, vcs, git"
msgstr "version, control, system, vcs, git"

#: ../../src/vcs/index.txt:8
msgid "Version Control System"
msgstr "Система контролю версій"

#: ../../src/vcs/index.txt:10
msgid ""
":abbr:`VCS (Version Control Systems)` play an integral role in modern "
"software development. They allow multiple developers to work on a project"
" simultaneously without overwriting each other's changes. VCSs track the "
"history of changes to the source code, making it possible to revert to "
"previous states, compare versions, and more."
msgstr ""

#: ../../src/vcs/index.txt:16
msgid ""
"Among the VCSs available, Git stands out as one of the most popular and "
"powerful tools. It's used by small projects and large-scale software "
"alike, owing to its flexibility, distributed nature, and efficient "
"handling of codebase versions."
msgstr ""

#: ../../src/vcs/index.txt:21
msgid ""
"In this part, you'll learn about the fundamentals of version control, how"
" to set up your environment for Git, dive into the basics of commits, "
"branches, and merges, understand the significance of tags, and finally, "
"explore how to collaborate using remote repositories and platforms like "
"GitHub."
msgstr ""

#: ../../src/vcs/intro.txt:8
msgid "About version control (Git)"
msgstr "Про контроль версій (Git)"

#: ../../src/vcs/intro.txt:10
msgid ""
"Version control is a system that records changes to a file or set of "
"files over time so that you can recall specific versions later. It allows"
" you to revert selected files back to a previous state, revert the entire"
" project back to a previous state, compare changes over time, see who "
"last modified something that might be causing a problem, who introduced "
"an issue and when, and more."
msgstr ""
"Контроль версій - це система, яка реєструє зміни у файлі або наборі "
"файлів з плином часу, щоб ви могли пізніше згадати конкретні версії. Він "
"дозволяє повернути вибрані файли до попереднього стану, повернути весь "
"проект до попереднього стану, порівняти зміни в часі, побачити, хто "
"востаннє змінював щось, що може спричинити проблему, хто і коли створив "
"проблему, тощо."

#: ../../src/vcs/intro.txt:16
msgid ""
"In a :abbr:`DVCS (Distributed Version Control Systems)` clients don't "
"just check out the latest snapshot of the files; rather, they fully "
"mirror the repository, including its full history. Thus, if any server "
"dies, and these systems were collaborating via that server, any of the "
"client repositories can be copied back up to the server to restore it. "
"Every clone is really a full backup of all the data."
msgstr ""
"У :abbr:`DVCS (Distributed Version Control Systems)` клієнти не просто "
"перевіряють останній знімок файлів, а повністю дзеркально копіюють "
"сховище, включно з його повною історією. Таким чином, якщо якийсь сервер "
"вийде з ладу, а ці системи працювали через нього, будь-який з клієнтських"
" репозиторіїв можна скопіювати на сервер, щоб відновити його роботу. "
"Кожен клон - це фактично повна резервна копія всіх даних."

#: ../../src/vcs/intro.txt:26
msgid "Distributed version control diagram"
msgstr "Розподілена схема управління версіями"

#: ../../src/vcs/intro.txt:29
msgid "What is Git?"
msgstr "Що таке Git?"

#: ../../src/vcs/intro.txt:30
msgid ""
"The major difference between Git and any other VCS is the way Git thinks "
"about its data. Conceptually, most other systems store information as a "
"list of file-based changes. Git doesn't think of or store its data this "
"way. Instead, Git thinks of its data more like a series of snapshots of a"
" miniature filesystem."
msgstr ""
"Основна відмінність між Git'ом та будь-якою іншою VCS полягає в тому, як "
"Git'ом мислить про свої дані. Концептуально, більшість інших систем "
"зберігають інформацію у вигляді списку змін у файлах. Git не думає про "
"свої дані і не зберігає їх таким чином. Натомість, Git думає про свої "
"дані як про серію знімків мініатюрної файлової системи."

#: ../../src/vcs/intro.txt:36
msgid ""
"This is an important distinction between Git and nearly all other VCSs. "
"It makes Git reconsider almost every aspect of version control that most "
"other systems copied from the previous generation. This makes Git more "
"like a mini filesystem with some incredibly powerful tools built on top "
"of it, rather than simply a VCS."
msgstr ""
"Це важлива відмінність між Git'ом та майже всіма іншими VCS. Вона змушує "
"Git'а переосмислити майже кожен аспект контролю версій, який більшість "
"інших систем скопіювали з попереднього покоління. Це робить Git більше "
"схожим на міні-файлову систему з деякими неймовірно потужними "
"інструментами, побудованими поверх неї, ніж на звичайну VCS."

#: ../../src/vcs/intro.txt:45
msgid "Storing data as snapshots of the project over time"
msgstr "Зберігання даних у вигляді знімків проекту з плином часу"

#: ../../src/vcs/intro.txt:48
msgid "Local operations"
msgstr "Локальні операції"

#: ../../src/vcs/intro.txt:49
msgid ""
"Most operations in Git need only local files and resources to operate -- "
"generally no information is needed from another computer on your network."
" Because you have the entire history of the project right there on your "
"local disk, most operations seem almost instantaneous."
msgstr ""
"Для виконання більшості операцій у Git'і потрібні лише локальні файли та "
"ресурси - зазвичай не потрібна інформація з іншого комп'ютера у вашій "
"мережі. Оскільки вся історія проекту зберігається на вашому локальному "
"диску, більшість операцій виконуються майже миттєво."

#: ../../src/vcs/intro.txt:55
msgid "Integrity"
msgstr "Цілісність"

#: ../../src/vcs/intro.txt:56
msgid ""
"Everything in Git is checksummed before it is stored and is then referred"
" to by that checksum. This means it's impossible to change the contents "
"of any file or directory without Git knowing about it."
msgstr ""
"Усе в Git'і має контрольну суму перед збереженням і потім посилається на "
"цю контрольну суму. Це означає, що неможливо змінити вміст будь-якого "
"файлу або каталогу без відома Git'а."

#: ../../src/vcs/intro.txt:61
msgid "Repository files states"
msgstr "Стани файлів сховища"

#: ../../src/vcs/intro.txt:62
msgid ""
"Git has three main states that your files can reside in: **modified**, "
"**staged**, and **committed**:"
msgstr ""
"Git має три основні стани, в яких можуть перебувати ваші файли: "
"**модифіковані**, **на стадії розробки** та **зафіксовані**:"

#: ../../src/vcs/intro.txt:65
msgid ""
"Modified means that you have changed the file but have not committed it "
"to your database yet."
msgstr ""
"Змінено означає, що ви змінили файл, але ще не зафіксували його у вашій "
"базі даних."

#: ../../src/vcs/intro.txt:67
msgid ""
"Staged means that you have marked a modified file in its current version "
"to go into your next commit snapshot."
msgstr ""
"Поетапний означає, що ви позначили змінений файл у його поточній версії, "
"щоб він потрапив до наступного знімка фіксації."

#: ../../src/vcs/intro.txt:69
msgid "Committed means that the data is safely stored in your local database."
msgstr ""
"Фіксація означає, що дані безпечно зберігаються у вашій локальній базі "
"даних."

#: ../../src/vcs/intro.txt:76
msgid "The basic Git workflow goes something like this:"
msgstr "Базовий робочий процес Git'а виглядає приблизно так:"

#: ../../src/vcs/intro.txt:78
msgid "You modify files in your working tree."
msgstr "Ви змінюєте файли у вашому робочому дереві."

#: ../../src/vcs/intro.txt:79
msgid ""
"You selectively stage just those changes you want to be part of your next"
" commit, which adds only those changes to the staging area."
msgstr ""
"Ви вибірково стабілізуєте лише ті зміни, які ви хочете включити в "
"наступний коміт, що додає тільки ці зміни в область стабілізації."

#: ../../src/vcs/intro.txt:81
msgid ""
"You do a commit, which takes the files as they are in the staging area "
"and stores that snapshot permanently to your Git directory."
msgstr ""
"Ви робите фіксацію, яка бере файли в тому вигляді, в якому вони "
"знаходяться в області підготовки, і зберігає цей знімок назавжди у вашому"
" каталозі Git'а."

#: ../../src/vcs/intro.txt:85
msgid "Command line"
msgstr "Командний рядок"

#: ../../src/vcs/intro.txt:87
msgid ""
"There are a lot of different ways to use Git. There are the original "
"command-line tools, and there are many graphical user interfaces of "
"varying capabilities. For one, the command line is the only place you can"
" run all Git commands -- most of the GUIs implement only a partial subset"
" of Git functionality for simplicity. If you know how to run the command-"
"line version, you can probably also figure out how to run the GUI "
"version, while the opposite is not necessarily true. Also, while your "
"choice of graphical client is a matter of personal taste, all users will "
"have the command-line tools installed and available."
msgstr ""
"Існує багато різних способів використання Git'у. Існують оригінальні "
"інструменти командного рядка, а також багато графічних інтерфейсів "
"користувача з різними можливостями. З одного боку, командний рядок є "
"єдиним місцем, де ви можете виконувати всі команди Git'а - більшість "
"графічних інтерфейсів реалізують лише часткову підмножину "
"функціональності Git'а для спрощення. Якщо ви знаєте, як запустити версію"
" з командного рядка, ви, ймовірно, також зможете з'ясувати, як запустити "
"версію з графічним інтерфейсом, хоча зворотне не обов'язково вірно. Крім "
"того, хоча ваш вибір графічного клієнта є справою особистого смаку, всі "
"користувачі матимуть встановлені та доступні інструменти командного "
"рядка."

#: ../../src/vcs/pullrequest.txt:-1
#, fuzzy
msgid "Version Control System - Pull Requests"
msgstr "Система контролю версій"

#: ../../src/vcs/pullrequest.txt:-1
msgid "Vladyslav Ponomaryov"
msgstr ""

#: ../../src/vcs/pullrequest.txt:-1
#, fuzzy
msgid "version, control, system, vcs, git, pull request, merge"
msgstr "version, control, system, vcs, git, setup"

#: ../../src/vcs/pullrequest.txt:9
msgid "Pull Request"
msgstr ""

#: ../../src/vcs/pullrequest.txt:11
msgid ""
"Pull request let you tell others about changes you've pushed to a branch "
"in a repository on GitHub. Once a pull request is opened, you can discuss"
" and review the potential changes with collaborators and add follow-up "
"commits before your changes are merged into the base branch:cite:`github"
":about-pr`."
msgstr ""

#: ../../src/vcs/pullrequest.txt:17
msgid "Draft pull requests"
msgstr ""

#: ../../src/vcs/pullrequest.txt:19
msgid ""
"Draft pull requests are available in public repositories on GitHub. When "
"you create a pull request, you can choose to a create a pull request that"
" is ready for review or a draft pull request. Draft pull requests cannot "
"be merged. When you're ready to get feedback on your pull request, you "
"can mark your draft pull request as ready for review."
msgstr ""

#: ../../src/vcs/pullrequest.txt:26
msgid "Difference between commits on compare and pull request pages"
msgstr ""

#: ../../src/vcs/pullrequest.txt:28
msgid ""
"The compare and pull request pages use different methods to calculate the"
" diff for changed files:"
msgstr ""

#: ../../src/vcs/pullrequest.txt:31
msgid ""
"Compare pages show the diff between the tip of the head ref and the "
"current common ancestor (that is, the merge base) of the head and base "
"ref."
msgstr ""

#: ../../src/vcs/pullrequest.txt:33
msgid ""
"Pull request pages show the diff between the tip of the head ref and the "
"common ancestor of the head and base ref at the time when the pull "
"request was created. Consequently, the merge base used for the comparison"
" might be different."
msgstr ""

#: ../../src/vcs/pullrequest.txt:39
#, fuzzy
msgid "About comparing branches"
msgstr "Про гілки"

#: ../../src/vcs/pullrequest.txt:41
msgid ""
"Pull requests display diffs to compare the changes you made in your topic"
" branch against the base branch that you want to merge your changes into."
msgstr ""

#: ../../src/vcs/pullrequest.txt:44
msgid ""
"Rather that viewing the commits themselves, you can view the proposed "
"changes as they'll appear in the files once the pull request is merged. "
"The files appear in alphabetical order within the Files changed tab. "
"Additions to the files appear in green and are prefaced by a ``+`` sign "
"while content that has been removed appears in red and is prefaced by a "
"``-`` sign :cite:`github:compare-pr`."
msgstr ""

#: ../../src/vcs/pullrequest.txt:52 ../../src/vcs/pullrequest.txt:73
#, fuzzy
msgid "Creating a pull request"
msgstr "Отримання та витягування з віддаленого репозиторію"

#: ../../src/vcs/pullrequest.txt:54
msgid ""
"Create a pull request to propose and collaborate on changes to a "
"repository. These changes are proposed in a *branch*, which ensures that "
"the default branch only contains finished and approved work:cite:`github"
":create-pr`."
msgstr ""

#: ../../src/vcs/pullrequest.txt:61
msgid ""
"Use a branch to isolate development work without affecting other branches"
" in the repository. Each repository has one default branch, and can have "
"multiple other branches. You can merge a branch into another branch using"
" a pull request."
msgstr ""

#: ../../src/vcs/pullrequest.txt:66
msgid ""
"Branches allow you to develop features, fix bugs, or safely experiment "
"with new ideas in a contained area of your repository."
msgstr ""

#: ../../src/vcs/pullrequest.txt:69
msgid ""
"You always create a branch from an existing branch. Typically, you might "
"create a new branch from the default branch of your repository."
msgstr ""

#: ../../src/vcs/pullrequest.txt:75
msgid "On GitHub, navigate to the main page of the repository."
msgstr ""

#: ../../src/vcs/pullrequest.txt:76
msgid "Switch to \"Pull requests\" tab."
msgstr ""

#: ../../src/vcs/pullrequest.txt:77
msgid "Press \"New pull request\" button."
msgstr ""

#: ../../src/vcs/pullrequest.txt:78
msgid "Select base and source branches."
msgstr ""

#: ../../src/vcs/pullrequest.txt:79
msgid "Press \"Create pull request\" button."
msgstr ""

#: ../../src/vcs/pullrequest.txt:80
msgid "Provide a meaningful title and description."
msgstr ""

#: ../../src/vcs/pullrequest.txt:81
msgid "Draft or create a pull request."
msgstr ""

#: ../../src/vcs/pullrequest.txt:83
msgid ""
"To create pull request that is ready for review, click **Create Pull "
"Request**."
msgstr ""

#: ../../src/vcs/pullrequest.txt:85
msgid ""
"To create a draft pull request, use the drop-down and select **Create "
"Draft Pull Request**, then click **Draft Pull Request**."
msgstr ""

#: ../../src/vcs/remotes.txt:3
msgid "Remotes"
msgstr "Віддалені репозиторії"

#: ../../src/vcs/remotes.txt:5
msgid ""
"To be able to collaborate on any Git project, you need to know how to "
"manage your remote repositories. Remote repositories are versions of your"
" project that are hosted on the Internet or network somewhere. You can "
"have several of them, each of which generally is either read-only or "
"read/write for you. Managing remotes includes knowing how to add remote "
"repositories, remove remote repositories that are no longer valid, manage"
" various branches and define them as being tracked or not, and more."
msgstr ""
"Щоб мати можливість співпрацювати над будь-яким Git-проектом, вам "
"потрібно знати, як керувати вашими віддаленими сховищами. Віддалені "
"сховища - це версії вашого проекту, розміщені десь в інтернеті або "
"мережі. Ви можете мати декілька таких сховищ, кожне з яких, як правило, "
"доступне лише для читання або читання/запису. Керування віддаленими "
"сховищами включає в себе вміння додавати віддалені сховища, видаляти "
"віддалені сховища, які більше не є дійсними, керувати різними гілками і "
"визначати їх як такі, що відстежуються чи ні, і багато іншого."

#: ../../src/vcs/remotes.txt:21
msgid "Showing your remote"
msgstr "Перелік віддалених репозиторіїв"

#: ../../src/vcs/remotes.txt:23
msgid ""
"To see which remote servers you have configured, you can run the ``git "
"remote`` command. It lists the shortnames of each remote handle you're "
"specified. If you've cloned your repository, you should at least see "
"``origin`` - that is default name Git gives to the server you clone from:"
msgstr ""
"Щоб побачити, які віддалені сервери ви налаштували, ви можете виконати "
"команду ``git remote``. Вона покаже короткі імена кожного вказаного вами "
"віддаленого дескриптора. Якщо ви клонували свій репозиторій, ви маєте "
"побачити принаймні ``origin`` - ім'я за замовчуванням, яке Git дає "
"серверу, з якого ви клонуєте:"

#: ../../src/vcs/remotes.txt:41
msgid ""
"This means we can pull contributions from any of these users pretty "
"easily. We may additionally have permission to push to one or more of "
"these."
msgstr ""
"Це означає, що ми можемо досить легко отримувати внески від будь-якого з "
"цих користувачів. Крім того, ми можемо мати дозвіл на проштовхування до "
"одного або декількох з них."

#: ../../src/vcs/remotes.txt:45
msgid "Adding remote repositories"
msgstr "Додавання віддалених репозиторіїв"

#: ../../src/vcs/remotes.txt:47
msgid ""
"To add a new remote Git repository as a shortname you can reference "
"easily, run ``git remote add <shortname> <url>``:"
msgstr ""
"Щоб додати новий віддалений репозиторій Git'у у вигляді короткого імені, "
"на яке можна легко посилатися, виконайте ``git remote add <назва> "
"<адреса>``:"

#: ../../src/vcs/remotes.txt:61
msgid ""
"Now you can use the string \"personal\" on the command line in lieu of "
"the whole URL. ``master`` branch of \"https://github.com/shorodilov"
"/python-course\" is now accessible as ``personal/master``, while "
"shortname to the same branch in origin will be -- ``origin/master``."
msgstr ""
"Тепер ви можете використовувати рядок \"personal\" в командному рядку "
"замість повної URL-адреси. Гілка ``master`` в "
"\"https://github.com/shorodilov/python-course\" тепер доступна як "
"``personal/master``, тоді як скорочена назва тієї ж гілки в origin буде "
"-- ``origin/master``."

#: ../../src/vcs/remotes.txt:67
msgid "Fetching and pulling from remotes"
msgstr "Отримання та витягування з віддаленого репозиторію"

#: ../../src/vcs/remotes.txt:69
msgid ""
"To get data from remote project, you can run ``git fetch`` command. The "
"command goes out to that remote project and pulls down all the "
"information from that remote project that you don't have yet. After you "
"do this, you should have references to all the branches from that remote,"
" which you can merge in or inspect at any time."
msgstr ""
"Щоб отримати дані з віддаленого проекту, ви можете виконати команду ``git"
" fetch``. Команда звернеться до цього віддаленого проекту і витягне всю "
"інформацію з нього, якої ви ще не маєте. Після цього ви матимете "
"посилання на всі гілки з цього віддаленого проекту, які ви можете "
"об'єднати або переглянути у будь-який час."

#: ../../src/vcs/remotes.txt:79
msgid ""
"If your current branch is set up to track a remote branch, you can use "
"``git pull`` command to automatically fetch and then merge that remote "
"branch into your current branch. By default, the ``git clone`` command "
"automatically sets up your local ``master`` branch to track the remote "
"``master`` branch (or whatever default remote branch)."
msgstr ""
"Якщо вашу поточну гілку налаштовано на відстеження віддаленої гілки, ви "
"можете скористатися командою ``git pull`` для автоматичного отримання і "
"подальшого об'єднання цієї віддаленої гілки у вашу поточну гілку. За "
"замовчуванням, команда ``git clone`` автоматично налаштовує вашу локальну"
" гілку ``master`` на відстеження віддаленої гілки ``master`` (або "
"будь-якої іншої віддаленої гілки за замовчуванням)."

#: ../../src/vcs/remotes.txt:85
msgid ""
"From Git version 2.27 onward, ``git pull`` will give a warning if the "
"``pull.rebase`` variable is not set. Git will keep warning you until you "
"set the variable."
msgstr ""
"Починаючи з версії 2.27, ``git pull`` видаватиме попередження, якщо "
"змінну ``pull.rebase`` не встановлено. Git продовжуватиме видавати "
"попередження, доки ви не встановите змінну."

#: ../../src/vcs/remotes.txt:90
msgid ""
"If you want the default behavior of Git (fast-forward if possible, else "
"create a merge commit): ``git config --global pull.rebase \"false\"``."
msgstr ""
"Якщо ви хочете отримати поведінку Git'а за замовчуванням (перемотування "
"вперед, якщо можливо, інакше створіть комміт злиття): ``git config "
"--global pull.rebase \"false\"``."

#: ../../src/vcs/remotes.txt:93
msgid ""
"If you want to rebase when pulling: ``git config --global pull.rebase "
"\"true\"``."
msgstr ""
"Якщо ви хочете перебазувати базу при витягуванні: ``git config --global "
"pull.rebase \"true\"``."

#: ../../src/vcs/remotes.txt:97
msgid "Pushing to remotes"
msgstr "Відправка до віддаленого репозиторію"

#: ../../src/vcs/remotes.txt:99
msgid ""
"When you have your project at a point that you want to share, you have to"
" push it upstream. The command for this is simple: ``git push <remote> "
"<branch>``."
msgstr ""
"Коли ваш проект знаходиться на етапі, яким ви хочете поділитися, вам "
"потрібно перемістити його вгору за течією. Команда для цього проста: "
"``git push <віддалений> <гілка>``."

#: ../../src/vcs/remotes.txt:106
msgid ""
"This command works only if you cloned from a server to which you have "
"write access and if nobody has pushed in the meantime. If you and someone"
" else clone at the same time and they push upstream and then you push "
"upstream, you push will rightly be rejected. You'll have to fetch their "
"work first and incorporate it into yours before you'll be allowed to "
"push."
msgstr ""
"Ця команда працює тільки якщо ви клонували з сервера, до якого у вас є "
"доступ на запис, і якщо в цей час ніхто не робив поштовх. Якщо ви "
"клонуєте одночасно з кимось іншим, і він зробить поштовх вище за течією, "
"а потім ви, ваш поштовх буде справедливо відхилено. Вам доведеться "
"спочатку отримати їхню роботу і включити її до своєї, перш ніж вам "
"дозволять проштовхувати."

#: ../../src/vcs/remotes.txt:113
msgid "Pushing a new branch to remote"
msgstr "Переміщення нової гілки до віддаленого репозиторію"

#: ../../src/vcs/remotes.txt:115
msgid ""
"In case you have created a local branch for some specific needs and you "
"want to share this branch, you need to set up track for this branch. This"
" can be done by using: ``git push --set-upstream origin "
"<remote_branch>``. This will create a new remote branch and set up track "
"to your current local branch. There is a shortcut for this command: ``git"
" push -u origin <remote_branch>``."
msgstr ""
"Якщо ви створили локальну гілку для якихось конкретних потреб і хочете "
"надати до неї доступ, вам потрібно налаштувати трек для цієї гілки. Це "
"можна зробити за допомогою ``git push --set-upstream origin "
"<віддалена_гілка>``. Це створить нову віддалену гілку і налаштує трек до "
"вашої поточної локальної гілки. Для цієї команди існує комбінація клавіш:"
" ``git push -u origin <віддалена_гілка>``."

#: ../../src/vcs/remotes.txt:122
msgid "Inspecting a remote"
msgstr "Перевірка віддаленого репозиторію"

#: ../../src/vcs/remotes.txt:124
msgid ""
"If you want to see more information about a particular remote, you can "
"use the ``git remote show <remote`` command."
msgstr ""
"Якщо ви хочете побачити більше інформації про певний віддалений сервер, "
"скористайтеся командою ``git remote show <remote``."

#: ../../src/vcs/remotes.txt:165
msgid ""
"It lists the URL for the remote repository as wll as the tracking branch "
"information. The command helpfully tells you that if you're on the "
"``master`` branch amd you run ``git pull``, it will automatically merge "
"the remote's ``master`` branch into the local one after it has been "
"fetched. It also lists all the remote references it has pulled down."
msgstr ""
"Вона показує URL-адресу віддаленого сховища, а також інформацію про "
"відстежувану гілку. Команда корисно повідомляє, що якщо ви перебуваєте на"
" гілці ``master`` і виконаєте ``git pull``, вона автоматично об'єднає "
"гілку ``master`` віддаленого сховища з локальною гілкою після того, як її"
" буде витягнуто. Також буде показано список усіх віддалених посилань, які"
" було витягнуто."

#: ../../src/vcs/setup.txt:-1
msgid "version, control, system, vcs, git, setup"
msgstr "version, control, system, vcs, git, setup"

#: ../../src/vcs/setup.txt:8
msgid "Git Setup"
msgstr "Налаштування Git'а"

#: ../../src/vcs/setup.txt:10
msgid ""
"Now that you have Git on your system, you'll want to do a few things to "
"customize your Git environment. Git comes with a tool called ``git "
"config`` that lets you get and set configuration variables that control "
"all aspects of how Git looks and operates. These variables can be stored "
"in three different places:"
msgstr ""
"Тепер, коли у вашій системі встановлено Git, ви захочете зробити кілька "
"речей, щоб налаштувати середовище Git'а. Git постачається з інструментом "
"під назвою ``git config``, який дозволяє вам отримувати та встановлювати "
"конфігураційні змінні, що контролюють всі аспекти вигляду та роботи "
"Git'у. Ці змінні можна зберігати у трьох різних місцях:"

#: ../../src/vcs/setup.txt:16
msgid ""
"*[path]/etc/gitconfig* file: Contains values applied to every user on the"
" system and all their repositories. If you pass the option ``--system`` "
"to git config, it reads and writes from this file specifically. Because "
"this is a system configuration file, you would need administrative or "
"superuser privilege to make changes to it."
msgstr ""
"Файл *[path]/etc/gitconfig*: Містить значення, що застосовуються до "
"кожного користувача у системі та всіх його сховищ. Якщо ви передасте git "
"config параметр ``--system``, він буде читати і писати саме з цього "
"файлу. Оскільки це файл конфігурації системи, вам знадобляться "
"адміністративні привілеї або привілеї суперкористувача, щоб вносити до "
"нього зміни."

#: ../../src/vcs/setup.txt:21
msgid ""
"*~/.gitconfig* or *~/.config/git/config* file: Values specific personally"
" to you, the user. You can make Git read and write to this file "
"specifically by passing the ``--global`` option, and this affects all of "
"the repositories you work with on your system."
msgstr ""
"*~/.gitconfig* або *~/.config/git/config* файл: Значення, характерні "
"особисто для вас, користувача. Ви можете змусити Git'а читати і писати до"
" цього файлу спеціально, передавши опцію ``--global``, і це вплине на всі"
" сховища, з якими ви працюєте у вашій системі."

#: ../../src/vcs/setup.txt:25
msgid ""
"*config* file in the Git directory (that is, *.git/config*) of whatever "
"repository you're currently using: Specific to that single repository. "
"You can force Git to read from and write to this file with the "
"``--local`` option, but that is in fact the default. Unsurprisingly, you "
"need to be located somewhere in a Git repository for this option to work "
"properly."
msgstr ""
"файл *config* у каталозі Git (тобто *.git/config*) того сховища, яке ви "
"зараз використовуєте: Специфічний для цього окремого сховища. Ви можете "
"змусити Git'а читати з цього файлу і писати до нього за допомогою опції "
"``--local``, але за замовчуванням так і є. Не дивно, що для правильної "
"роботи цієї опції вам потрібно знаходитися десь у сховищі Git'а."

#: ../../src/vcs/setup.txt:31
msgid ""
"Each level overrides values in the previous level, so values in "
"*.git/config* trump those in *[path]/etc/gitconfig*."
msgstr ""
"Кожен рівень перевизначає значення попереднього рівня, тому значення у "
"*.git/config* мають перевагу над значеннями у *[path]/etc/gitconfig*."

#: ../../src/vcs/setup.txt:34
msgid "You can view all of your settings and where they are coming from using:"
msgstr ""
"Ви можете переглянути всі свої налаштування і те, звідки вони надходять, "
"використовуючи:"

#: ../../src/vcs/setup.txt:41
msgid "Your identity"
msgstr "Ваша особистість"

#: ../../src/vcs/setup.txt:43
msgid ""
"The first thing you should do when you install Git is to set your user "
"name and email address. This is important because every Git commit uses "
"this information."
msgstr ""
"Перше, що вам слід зробити під час встановлення Git'у, це вказати своє "
"ім'я користувача та адресу електронної пошти. Це важливо, оскільки кожна "
"фіксація Git'а використовує цю інформацію."

#: ../../src/vcs/tagging.txt:3
msgid "Tagging"
msgstr "Тегування"

#: ../../src/vcs/tagging.txt:5
msgid ""
"Like most VCSs, Git has the ability to tag specific points in a "
"repository's history as being important. Typically, people use this "
"functionality to mark release points (``v1.0``, ``v2.0`` and so on)."
msgstr ""
"Як і більшість VCS, Git має можливість позначати певні моменти в історії "
"сховища як важливі. Зазвичай люди використовують цю функцію для "
"позначення точок релізу (``v1.0``, ``v2.0`` і так далі)."

#: ../../src/vcs/tagging.txt:10
msgid "Listing tags"
msgstr "Перелік тегів"

#: ../../src/vcs/tagging.txt:12
msgid ""
"Listing the existing tags in Git is straightforward. Just type ``git "
"tag`` (with optional ``-l`` or ``--list``)."
msgstr ""
"Перерахувати існуючі теги у Git'і дуже просто. Просто введіть ``git tag``"
" (з необов'язковим ``-l`` або ``--list``)."

#: ../../src/vcs/tagging.txt:21
msgid ""
"This command lists the tags in alphabetical order, the order in which "
"they are displayed has no real importance. You can also search for tags "
"that match a particular pattern. The Git source repo, for instance "
"contains more than 500 tags. If you're interested only in looking at the "
"1.8.4 series, you can run this:"
msgstr ""
"Ця команда перелічує мітки в алфавітному порядку, порядок їх відображення"
" не має особливого значення. Ви також можете шукати теги, які "
"відповідають певному шаблону. Наприклад, сховище коду Git містить понад "
"500 тегів. Якщо вас цікавить лише серія 1.8.4, ви можете виконати цю "
"команду:"

#: ../../src/vcs/tagging.txt:37
msgid "Creating tags"
msgstr "Створення тегів"

#: ../../src/vcs/tagging.txt:39
msgid "Git supports two types of tags: *lightweight* and *annotated*."
msgstr "Git підтримує два типи тегів: *легкі* та *анотовані*."

#: ../../src/vcs/tagging.txt:41
msgid ""
"A lightweight tag is very much like a branch that doesn't change -- it's "
"just a pointer to a specific commit."
msgstr ""
"Полегшений тег дуже схожий на гілку, яка не змінюється -- це просто "
"вказівник на конкретний комміт."

#: ../../src/vcs/tagging.txt:44
msgid ""
"Annotated tags, however, are stored as full objects in the Git database. "
"They're checksummed; contain the tagger name, email, and date; have a "
"tagging message; and can be signed and verified with GBU Privacy Guard "
"(GPG). It's generally recommended that you create annotated tags so you "
"can have all this information; but if you want a temporary tag or for "
"some reason don't want to keep the other information, lightweight tags "
"are available too."
msgstr ""
"Анотовані мітки, однак, зберігаються як повноцінні об'єкти в базі даних "
"Git. Вони мають контрольну суму, містять ім'я тегувальника, електронну "
"пошту та дату, мають повідомлення про тегування, а також можуть бути "
"підписані та перевірені за допомогою GBU Privacy Guard (GPG). Зазвичай "
"рекомендується створювати анотовані мітки, щоб мати всю цю інформацію; "
"але якщо вам потрібна тимчасова мітка або з якихось причин ви не хочете "
"зберігати іншу інформацію, доступні також полегшені мітки."

#: ../../src/vcs/tagging.txt:52
msgid "Annotated tags"
msgstr "Анотовані теги"

#: ../../src/vcs/tagging.txt:53
msgid ""
"Creating an annotated tag in Git is simple. The easiest way is to specify"
" ``-a`` when you run the ``tag`` command:"
msgstr ""
"Створити анотовану мітку в Git'і дуже просто. Найпростіший спосіб - "
"вказати ``-a`` при виконанні команди ``tag``:"

#: ../../src/vcs/tagging.txt:69
msgid "Lightweight tags"
msgstr "Легкі мітки"

#: ../../src/vcs/tagging.txt:70
msgid ""
"Another way to tag commits is with a lightweight tag. this is basically "
"the commit checksum stored in a file -- no other information is kept. To "
"create a lightweight tag, don't supply any of the ``-a``, ``-s``, or "
"``-m`` options, just provide a tag name:"
msgstr ""
"Інший спосіб позначення коммітів - використання полегшених тегів. Це, по "
"суті, контрольна сума комміту, яка зберігається у файлі - ніяка інша "
"інформація не зберігається. Щоб створити полегшену мітку, не вказуйте "
"жодної з опцій ``-a``, ``-s`` або ``-m``, просто вкажіть назву мітки:"

#: ../../src/vcs/tagging.txt:89
msgid "Tagging later"
msgstr "Відмітити пізніше"

#: ../../src/vcs/tagging.txt:90
msgid "You can also tag commits after you're moved past them."
msgstr "Ви також можете позначати коміти після того, як ви пройшли повз них."

#: ../../src/vcs/tagging.txt:107
msgid "Deleting tags"
msgstr "Видалення тегів"

#: ../../src/vcs/tagging.txt:109
msgid ""
"To delete a tag on your local repository, you can use ``git tag -d "
"<tagname>``."
msgstr ""
"Щоб видалити тег у вашому локальному сховищі, ви можете скористатися "
"``git tag -d <tagname>``."

#: ../../src/vcs/tagging.txt:117
msgid "Checking out tags"
msgstr "Перевірка тегів"

#: ../../src/vcs/tagging.txt:119
msgid ""
"If you want to view the versions of files a tag is pointing to, you can "
"do a ``git checkout`` of that tag, although this puts your repository in "
"\"detached HEAD\" state, which has some ill side effects:"
msgstr ""
"Якщо ви хочете переглянути версії файлів, на які вказує тег, ви можете "
"виконати ``git checkout`` цього тегу, хоча це переводить ваше сховище у "
"стан \"відокремленої ГОЛОВИ\", що має деякі погані побічні ефекти:"

#: ../../src/vcs/tagging.txt:145
msgid ""
"In \"detached HEAD\" state, if you make changes and then create a commit,"
" the tag will stay the same, but your new commit won’t belong to any "
"branch and will be unreachable, except by the exact commit hash. Thus, if"
" you need to make changes -- say you’re fixing a bug on an older version,"
" for instance -- you will generally want to create a branch:"
msgstr ""
"У стані \"detached HEAD\", якщо ви внесете зміни, а потім створите коміт,"
" тег залишиться незмінним, але ваш новий коміт не належатиме до жодної "
"гілки і буде недоступним, окрім як за точним хешем коміту. Таким чином, "
"якщо вам потрібно внести зміни - скажімо, ви виправляєте ваду у старій "
"версії - вам, як правило, краще створити гілку:"

#~ msgid "version, control, system, vcs, git, history, commit"
#~ msgstr "version, control, system, vcs, git, history, commit"

