# Copyright (C) 2023, Python training course authors and contributors
# This file is distributed under the same license as the Python Training
# Course package.
# SERHII HORODILOV <sgorodil@gmail.com>, 2023.
msgid ""
msgstr ""
"Project-Id-Version: Python Training Course 2023.06.dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-05 19:49+0300\n"
"PO-Revision-Date: 2023-10-05 20:16+0300\n"
"Last-Translator: Serhii Horodilov <sgorodil@gmail.com>\n"
"Language-Team: uk <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Generated-By: Babel 2.13.0\n"
"X-Generator: Poedit 3.4\n"

#: ../../src/vcs/tagging.txt:3
msgid "Tagging"
msgstr "Тегування"

#: ../../src/vcs/tagging.txt:5
msgid ""
"Like most VCSs, Git has the ability to tag specific points in a repository's "
"history as being important. Typically, people use this functionality to mark "
"release points (``v1.0``, ``v2.0`` and so on)."
msgstr ""
"Як і більшість VCS, Git має можливість позначати певні моменти в історії "
"сховища як важливі. Зазвичай люди використовують цю функцію для позначення "
"точок релізу (``v1.0``, ``v2.0`` і так далі)."

#: ../../src/vcs/tagging.txt:10
msgid "Listing tags"
msgstr "Перелік тегів"

#: ../../src/vcs/tagging.txt:12
msgid ""
"Listing the existing tags in Git is straightforward. Just type ``git tag`` "
"(with optional ``-l`` or ``--list``)."
msgstr ""
"Перерахувати існуючі теги у Git'і дуже просто. Просто введіть ``git tag`` (з "
"необов'язковим ``-l`` або ``--list``)."

#: ../../src/vcs/tagging.txt:21
msgid ""
"This command lists the tags in alphabetical order, the order in which they "
"are displayed has no real importance. You can also search for tags that "
"match a particular pattern. The Git source repo, for instance contains more "
"than 500 tags. If you're interested only in looking at the 1.8.4 series, you "
"can run this:"
msgstr ""
"Ця команда перелічує мітки в алфавітному порядку, порядок їх відображення не "
"має особливого значення. Ви також можете шукати теги, які відповідають "
"певному шаблону. Наприклад, сховище коду Git містить понад 500 тегів. Якщо "
"вас цікавить лише серія 1.8.4, ви можете виконати цю команду:"

#: ../../src/vcs/tagging.txt:37
msgid "Creating tags"
msgstr "Створення тегів"

#: ../../src/vcs/tagging.txt:39
msgid "Git supports two types of tags: *lightweight* and *annotated*."
msgstr "Git підтримує два типи тегів: *легкі* та *анотовані*."

#: ../../src/vcs/tagging.txt:41
msgid ""
"A lightweight tag is very much like a branch that doesn't change -- it's "
"just a pointer to a specific commit."
msgstr ""
"Полегшений тег дуже схожий на гілку, яка не змінюється -- це просто "
"вказівник на конкретний комміт."

#: ../../src/vcs/tagging.txt:44
msgid ""
"Annotated tags, however, are stored as full objects in the Git database. "
"They're checksummed; contain the tagger name, email, and date; have a "
"tagging message; and can be signed and verified with GBU Privacy Guard "
"(GPG). It's generally recommended that you create annotated tags so you can "
"have all this information; but if you want a temporary tag or for some "
"reason don't want to keep the other information, lightweight tags are "
"available too."
msgstr ""
"Анотовані мітки, однак, зберігаються як повноцінні об'єкти в базі даних Git. "
"Вони мають контрольну суму, містять ім'я тегувальника, електронну пошту та "
"дату, мають повідомлення про тегування, а також можуть бути підписані та "
"перевірені за допомогою GBU Privacy Guard (GPG). Зазвичай рекомендується "
"створювати анотовані мітки, щоб мати всю цю інформацію; але якщо вам "
"потрібна тимчасова мітка або з якихось причин ви не хочете зберігати іншу "
"інформацію, доступні також полегшені мітки."

#: ../../src/vcs/tagging.txt:52
msgid "Annotated tags"
msgstr "Анотовані теги"

#: ../../src/vcs/tagging.txt:53
msgid ""
"Creating an annotated tag in Git is simple. The easiest way is to specify ``-"
"a`` when you run the ``tag`` command:"
msgstr ""
"Створити анотовану мітку в Git'і дуже просто. Найпростіший спосіб - вказати "
"``-a`` при виконанні команди ``tag``:"

#: ../../src/vcs/tagging.txt:69
msgid "Lightweight tags"
msgstr "Легкі мітки"

#: ../../src/vcs/tagging.txt:70
msgid ""
"Another way to tag commits is with a lightweight tag. this is basically the "
"commit checksum stored in a file -- no other information is kept. To create "
"a lightweight tag, don't supply any of the ``-a``, ``-s``, or ``-m`` "
"options, just provide a tag name:"
msgstr ""
"Інший спосіб позначення коммітів - використання полегшених тегів. Це, по "
"суті, контрольна сума комміту, яка зберігається у файлі - ніяка інша "
"інформація не зберігається. Щоб створити полегшену мітку, не вказуйте жодної "
"з опцій ``-a``, ``-s`` або ``-m``, просто вкажіть назву мітки:"

#: ../../src/vcs/tagging.txt:89
msgid "Tagging later"
msgstr "Відмітити пізніше"

#: ../../src/vcs/tagging.txt:90
msgid "You can also tag commits after you're moved past them."
msgstr "Ви також можете позначати коміти після того, як ви пройшли повз них."

#: ../../src/vcs/tagging.txt:107
msgid "Deleting tags"
msgstr "Видалення тегів"

#: ../../src/vcs/tagging.txt:109
msgid ""
"To delete a tag on your local repository, you can use ``git tag -d "
"<tagname>``."
msgstr ""
"Щоб видалити тег у вашому локальному сховищі, ви можете скористатися ``git "
"tag -d <tagname>``."

#: ../../src/vcs/tagging.txt:117
msgid "Checking out tags"
msgstr "Перевірка тегів"

#: ../../src/vcs/tagging.txt:119
msgid ""
"If you want to view the versions of files a tag is pointing to, you can do a "
"``git checkout`` of that tag, although this puts your repository in "
"\"detached HEAD\" state, which has some ill side effects:"
msgstr ""
"Якщо ви хочете переглянути версії файлів, на які вказує тег, ви можете "
"виконати ``git checkout`` цього тегу, хоча це переводить ваше сховище у стан "
"\"відокремленої ГОЛОВИ\", що має деякі погані побічні ефекти:"

#: ../../src/vcs/tagging.txt:145
msgid ""
"In \"detached HEAD\" state, if you make changes and then create a commit, "
"the tag will stay the same, but your new commit won’t belong to any branch "
"and will be unreachable, except by the exact commit hash. Thus, if you need "
"to make changes -- say you’re fixing a bug on an older version, for instance "
"-- you will generally want to create a branch:"
msgstr ""
"У стані \"detached HEAD\", якщо ви внесете зміни, а потім створите коміт, "
"тег залишиться незмінним, але ваш новий коміт не належатиме до жодної гілки "
"і буде недоступним, окрім як за точним хешем коміту. Таким чином, якщо вам "
"потрібно внести зміни - скажімо, ви виправляєте ваду у старій версії - вам, "
"як правило, краще створити гілку:"
