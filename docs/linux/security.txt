.. _file_security:

*******************************************************************************
                                 File Security
*******************************************************************************

Access Rights
-------------

This is the Linux's first line of defence. The Linux security model is based
on the one used UNIX systems, and is as rigid as the UNIX security model.
On a Linux system every file is owned by a user and a group user. There is also
a third category of users, those are not the user owner and don't belong to
the group owning a file. For each category of users, read, write and execute
permissions can be granted or denied.

.. code-block::

    monty:~> ls -l foo_dir/foo_1
    drw-rw-r--  1   monty   monty       0   Jul  4 19:15    foo_1
    monty:~> ls -l /bin/ls
    -rwxr-xr-x  1   root    root    45948   Aug 15 08:00    /bin/ls*

The first file is a regular file (first dash). Users with username *monty* or
users belonging to the group *monty* can read and write (change, move, delete)
the file. But they can't execute this file. All other users are only allowed
to read the file.

The second example is an executable file. Everybody can run it, but you need to
be *root* to change it.

Access rights are split into 3 categories: owner, group and others. Note
repeating "rwx" characters in outputs above - these are the access permissions
for user, group and others. If "-" a dash is present for some category this
means that the action is denied.

Here is the table listing the access and user group codes:

+--------+--------------------------------------------------------------------+
| Code   | Meaning                                                            |
+========+====================================================================+
| 0 or - | The access right that is supposed to be on this place is not       |
|        | granted.                                                           |
+--------+--------------------------------------------------------------------+
| 4 or r | Read access is granted to the user category defined in this place. |
+--------+--------------------------------------------------------------------+
| 2 or w | Write access is granted to the user category defined in this place.|
+--------+--------------------------------------------------------------------+
| 1 or x | Execute access is granted to the user category defined in this     |
|        | place.                                                             |
+--------+--------------------------------------------------------------------+
| u      | User permissions                                                   |
+--------+--------------------------------------------------------------------+
| g      | Group permissions                                                  |
+--------+--------------------------------------------------------------------+
| o      | Permissions for others                                             |
+--------+--------------------------------------------------------------------+

Changing Permissions
--------------------

A normal consequence of applying strict file permissions, and sometimes
a nuisance, is that access rights will need to be changed for all kinds
of reasons. We use the :abbr:`chmod(Change Mode)` command to do this.

The ``chmod`` can handle **+** and **-** operators to grant or revoke access
rights. For example:

.. code-block:: bash

    chmod u+rwx go-rwx file  # user - all granted, group and other - all denied
    chmod u+x file           # grant execution to user

When using ``chmod`` with numeric arguments, the values for each granted access
right have to be counted together per group. The following table lists the most
common combinations:

+--------------------+--------------------------------------------------------+
| Command            | Meaning                                                |
+====================+========================================================+
| ``chmod 400 file`` | To protect a file against accidental overwriting.      |
+--------------------+--------------------------------------------------------+
| ``chmod 500 dir``  | To protect yourself from accidental removing, renaming,|
|                    | or moving files from this directory.                   |
+--------------------+--------------------------------------------------------+
| ``chmod 600 file`` | A private file only changeable by the user who entered |
|                    | this command.                                          |
+--------------------+--------------------------------------------------------+
| ``chmod 644 file`` | A publicly readable file that can only be changed by   |
|                    | the issuing user.                                      |
+--------------------+--------------------------------------------------------+
| ``chmod 660 file`` | Users belonging to your group can change this file,    |
|                    | others don't have any access to it at all.             |
+--------------------+--------------------------------------------------------+
| ``chmod 700 file`` | Protects a file against any access from other users,   |
|                    | while the issuing user still has full access.          |
+--------------------+--------------------------------------------------------+
| ``chmod 755 dir``  | For files that should be readable and executable by    |
|                    | others, but only changeable by the issuing user.       |
+--------------------+--------------------------------------------------------+
| ``chmod 775 file`` | Standard file sharing mode for a group.                |
+--------------------+--------------------------------------------------------+
| ``chmod 777 file`` | Everybody can do everything to this file.              |
+--------------------+--------------------------------------------------------+

Changing Ownership
------------------

When a file is owned by the wrong user or group, the error can be repaired with
:abbr:`chown(Change Owner)` and :abbr:`chgrp(Change Group)` commands. Changing
file ownership is a frequent system administrative task in environment where
files need to be shared in a group.

The ``chown`` command can be applied to change both user and group ownership
of a file. ``chgrp`` can apply changes only for the group.

.. code-block:: bash

    chown new_user file            # change owner
    chown new_user:new_group file  # change owner and group
    chown :new_group file          # change group
